/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PROTO_UPDATE_EVENT_MESSAGE_PB_H_INCLUDED
#define PB_PROTO_UPDATE_EVENT_MESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _I2CWriteEvent {
    uint32_t peripheral_to_update;
    uint32_t i2c_address;
    uint32_t register_to_update;
    uint32_t value_to_write;
} I2CWriteEvent;

typedef struct _SPIWriteEvent {
    uint32_t peripheral_to_update;
    pb_callback_t registers_to_update;
    pb_callback_t values_to_write;
} SPIWriteEvent;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define I2CWriteEvent_init_default               {0, 0, 0, 0}
#define SPIWriteEvent_init_default               {0, {{NULL}, NULL}, {{NULL}, NULL}}
#define I2CWriteEvent_init_zero                  {0, 0, 0, 0}
#define SPIWriteEvent_init_zero                  {0, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define I2CWriteEvent_peripheral_to_update_tag   1
#define I2CWriteEvent_i2c_address_tag            2
#define I2CWriteEvent_register_to_update_tag     3
#define I2CWriteEvent_value_to_write_tag         4
#define SPIWriteEvent_peripheral_to_update_tag   1
#define SPIWriteEvent_registers_to_update_tag    2
#define SPIWriteEvent_values_to_write_tag        3

/* Struct field encoding specification for nanopb */
#define I2CWriteEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   peripheral_to_update,   1) \
X(a, STATIC,   SINGULAR, UINT32,   i2c_address,       2) \
X(a, STATIC,   SINGULAR, UINT32,   register_to_update,   3) \
X(a, STATIC,   SINGULAR, UINT32,   value_to_write,    4)
#define I2CWriteEvent_CALLBACK NULL
#define I2CWriteEvent_DEFAULT NULL

#define SPIWriteEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   peripheral_to_update,   1) \
X(a, CALLBACK, REPEATED, UINT32,   registers_to_update,   2) \
X(a, CALLBACK, REPEATED, UINT32,   values_to_write,   3)
#define SPIWriteEvent_CALLBACK pb_default_field_callback
#define SPIWriteEvent_DEFAULT NULL

extern const pb_msgdesc_t I2CWriteEvent_msg;
extern const pb_msgdesc_t SPIWriteEvent_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define I2CWriteEvent_fields &I2CWriteEvent_msg
#define SPIWriteEvent_fields &SPIWriteEvent_msg

/* Maximum encoded size of messages (where known) */
/* SPIWriteEvent_size depends on runtime parameters */
#define I2CWriteEvent_size                       24
#define PROTO_UPDATE_EVENT_MESSAGE_PB_H_MAX_SIZE I2CWriteEvent_size

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
