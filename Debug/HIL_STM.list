
HIL_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003584  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003740  08003740  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003740  08003740  00013740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003748  08003748  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000000c  0800375c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800375c  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001caa5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aae  00000000  00000000  0003cae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000144db  00000000  00000000  0004058f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00054a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002018  00000000  00000000  00055740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019f8f  00000000  00000000  00057758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e155  00000000  00000000  000716e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0b3c  00000000  00000000  0008f83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130378  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002bb4  00000000  00000000  001303c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003700 	.word	0x08003700

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003700 	.word	0x08003700

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <i2c_init>:
}

// Develop an I2C receive state machine to keep track of how many bytes to receive, send, etc based on the peripheral that we are trying to simulate

void i2c_init(I2C_Settings *settings, I2C_SLAVE_SELECT slave_select, I2C_Callbacks *cbs)
{
 80004d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t i2c_index = settings->i2c_slave_id;
 80004dc:	7945      	ldrb	r5, [r0, #5]
	memcpy(&(i2c_settings[i2c_index]), settings, sizeof(I2C_Settings));
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <i2c_init+0x80>)
 80004e0:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80004e4:	eb05 0c4c 	add.w	ip, r5, ip, lsl #1
{
 80004e8:	4604      	mov	r4, r0
 80004ea:	460f      	mov	r7, r1
 80004ec:	4616      	mov	r6, r2
	memcpy(&(i2c_settings[i2c_index]), settings, sizeof(I2C_Settings));
 80004ee:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80004f2:	fa0f f985 	sxth.w	r9, r5
 80004f6:	4686      	mov	lr, r0
 80004f8:	f100 0a20 	add.w	sl, r0, #32
 80004fc:	f8de 0000 	ldr.w	r0, [lr]
 8000500:	f8de 1004 	ldr.w	r1, [lr, #4]
 8000504:	f8de 2008 	ldr.w	r2, [lr, #8]
 8000508:	f8de 300c 	ldr.w	r3, [lr, #12]
 800050c:	46e0      	mov	r8, ip
 800050e:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
 8000512:	f10e 0e10 	add.w	lr, lr, #16
 8000516:	45d6      	cmp	lr, sl
 8000518:	46c4      	mov	ip, r8
 800051a:	d1ef      	bne.n	80004fc <i2c_init+0x24>
 800051c:	f8de 0000 	ldr.w	r0, [lr]
 8000520:	f8de 1004 	ldr.w	r1, [lr, #4]
 8000524:	f8de 2008 	ldr.w	r2, [lr, #8]
 8000528:	4643      	mov	r3, r8
 800052a:	c307      	stmia	r3!, {r0, r1, r2}
	memcpy(&(i2c_callbacks[i2c_index]), cbs, sizeof(I2C_Callbacks));
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <i2c_init+0x84>)
 800052e:	6830      	ldr	r0, [r6, #0]
 8000530:	6871      	ldr	r1, [r6, #4]
 8000532:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8000536:	c303      	stmia	r3!, {r0, r1}

	i2c_address_mapping[settings->i2c_slave_address] = settings->i2c_slave_id;

	i2c_fsm_state[i2c_index].i2c_slave_state = I2C_IDLE;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <i2c_init+0x88>)
	i2c_address_mapping[settings->i2c_slave_address] = settings->i2c_slave_id;
 800053a:	7922      	ldrb	r2, [r4, #4]
 800053c:	4909      	ldr	r1, [pc, #36]	; (8000564 <i2c_init+0x8c>)
	i2c_fsm_state[i2c_index].i2c_slave_state = I2C_IDLE;
 800053e:	2000      	movs	r0, #0
 8000540:	f803 0015 	strb.w	r0, [r3, r5, lsl #1]
	i2c_fsm_state[i2c_index].i2c_slave_select = slave_select;
 8000544:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8000548:	705f      	strb	r7, [r3, #1]
	i2c_address_mapping[settings->i2c_slave_address] = settings->i2c_slave_id;
 800054a:	7963      	ldrb	r3, [r4, #5]
 800054c:	548b      	strb	r3, [r1, r2]

	HAL_I2C_EnableListen_IT(settings->hi2c);
 800054e:	6820      	ldr	r0, [r4, #0]
}
 8000550:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_I2C_EnableListen_IT(settings->hi2c);
 8000554:	f001 b8a6 	b.w	80016a4 <HAL_I2C_EnableListen_IT>
 8000558:	200000bc 	.word	0x200000bc
 800055c:	200000a8 	.word	0x200000a8
 8000560:	200000b8 	.word	0x200000b8
 8000564:	20000028 	.word	0x20000028

08000568 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
	uint8_t i2c_index = (hi2c == i2c_settings[0].hi2c) ? 0 : 1;
 8000568:	4a07      	ldr	r2, [pc, #28]	; (8000588 <HAL_I2C_ListenCpltCallback+0x20>)
//	prv_i2c_get_index(hi2c, &i2c_index);

	i2c_callbacks[i2c_index].i2c_process_received_data(&(i2c_settings[i2c_index]), &i2c_fsm_state[i2c_index]);
 800056a:	4908      	ldr	r1, [pc, #32]	; (800058c <HAL_I2C_ListenCpltCallback+0x24>)
	uint8_t i2c_index = (hi2c == i2c_settings[0].hi2c) ? 0 : 1;
 800056c:	6813      	ldr	r3, [r2, #0]
 800056e:	1a18      	subs	r0, r3, r0
 8000570:	bf18      	it	ne
 8000572:	2001      	movne	r0, #1
	i2c_callbacks[i2c_index].i2c_process_received_data(&(i2c_settings[i2c_index]), &i2c_fsm_state[i2c_index]);
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_I2C_ListenCpltCallback+0x28>)
 8000576:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800057a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800057e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8000582:	fb0c 2000 	mla	r0, ip, r0, r2
 8000586:	4718      	bx	r3
 8000588:	200000bc 	.word	0x200000bc
 800058c:	200000b8 	.word	0x200000b8
 8000590:	200000a8 	.word	0x200000a8

08000594 <HAL_I2C_AddrCallback>:

	// HAL_I2C_EnableListen_IT(hi2c);
}

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000594:	b510      	push	{r4, lr}
	uint16_t i2c_slave_address = AddrMatchCode >> 1;
 8000596:	0852      	lsrs	r2, r2, #1
{
 8000598:	b082      	sub	sp, #8
	uint8_t i2c_index = i2c_address_mapping[i2c_slave_address];
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_I2C_AddrCallback+0x38>)

	I2C_Callback_Info cb_info = {.transfer_direction = TransferDirection, .i2c_slave_address = i2c_slave_address};
 800059c:	f88d 1004 	strb.w	r1, [sp, #4]
	uint8_t i2c_index = i2c_address_mapping[i2c_slave_address];
 80005a0:	5c9b      	ldrb	r3, [r3, r2]

	i2c_callbacks[i2c_index].i2c_process_address(&(i2c_settings[i2c_index]), &i2c_fsm_state[i2c_index], &cb_info);
 80005a2:	490b      	ldr	r1, [pc, #44]	; (80005d0 <HAL_I2C_AddrCallback+0x3c>)
	I2C_Callback_Info cb_info = {.transfer_direction = TransferDirection, .i2c_slave_address = i2c_slave_address};
 80005a4:	f88d 2005 	strb.w	r2, [sp, #5]
	i2c_callbacks[i2c_index].i2c_process_address(&(i2c_settings[i2c_index]), &i2c_fsm_state[i2c_index], &cb_info);
 80005a8:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
 80005ac:	4c09      	ldr	r4, [pc, #36]	; (80005d4 <HAL_I2C_AddrCallback+0x40>)
 80005ae:	480a      	ldr	r0, [pc, #40]	; (80005d8 <HAL_I2C_AddrCallback+0x44>)
 80005b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80005b4:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80005b8:	eb04 0143 	add.w	r1, r4, r3, lsl #1
 80005bc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80005c0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80005c4:	aa01      	add	r2, sp, #4
 80005c6:	4798      	blx	r3
	// 	{
	// 		i2c_slave_state = MAX17261_SLAVE_TX;
	// 		HAL_I2C_Slave_Seq_Transmit_IT(hi2c, data_to_send, 3, I2C_FIRST_AND_LAST_FRAME);
	// 	}
	// }
}
 80005c8:	b002      	add	sp, #8
 80005ca:	bd10      	pop	{r4, pc}
 80005cc:	20000028 	.word	0x20000028
 80005d0:	200000a8 	.word	0x200000a8
 80005d4:	200000b8 	.word	0x200000b8
 80005d8:	200000bc 	.word	0x200000bc

080005dc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <HAL_I2C_SlaveTxCpltCallback>:
	*i2c_index = (hi2c == i2c_settings[0].hi2c) ? 0 : 1;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_I2C_SlaveTxCpltCallback+0x1c>)
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	uint8_t i2c_index = 0;
	prv_i2c_get_index(hi2c, &i2c_index);

	i2c_fsm_state[i2c_index].i2c_slave_select = I2C_NO_SLAVE;
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_I2C_SlaveTxCpltCallback+0x20>)
	*i2c_index = (hi2c == i2c_settings[0].hi2c) ? 0 : 1;
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1a18      	subs	r0, r3, r0
 80005e8:	bf18      	it	ne
 80005ea:	2001      	movne	r0, #1
	i2c_fsm_state[i2c_index].i2c_slave_select = I2C_NO_SLAVE;
 80005ec:	eb02 0140 	add.w	r1, r2, r0, lsl #1
 80005f0:	2300      	movs	r3, #0
 80005f2:	704b      	strb	r3, [r1, #1]
	i2c_fsm_state[i2c_index].i2c_slave_state = I2C_IDLE;
 80005f4:	f802 3010 	strb.w	r3, [r2, r0, lsl #1]
	// if (i2c_slave_state == PCA9555_SLAVE_TX || i2c_slave_state == MAX17261_SLAVE_TX)
	// {
	// 	i2c_slave = I2C_NO_SLAVE;
	// 	i2c_slave_state = I2C_IDLE;
	// }
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200000bc 	.word	0x200000bc
 8000600:	200000b8 	.word	0x200000b8

08000604 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
	// TODO: Handle I2C Errors
	HAL_I2C_EnableListen_IT(hi2c);
 8000604:	f001 b84e 	b.w	80016a4 <HAL_I2C_EnableListen_IT>

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	2300      	movs	r3, #0
{
 800060c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000612:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000616:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800061a:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4921      	ldr	r1, [pc, #132]	; (80006a4 <SystemClock_Config+0x9c>)
 8000620:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800062c:	6408      	str	r0, [r1, #64]	; 0x40
 800062e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000630:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000634:	9101      	str	r1, [sp, #4]
 8000636:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	9302      	str	r3, [sp, #8]
 800063a:	6813      	ldr	r3, [r2, #0]
 800063c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	6813      	ldr	r3, [r2, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000658:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000660:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000664:	2248      	movs	r2, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000666:	2303      	movs	r3, #3
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066e:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000672:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f001 ff3e 	bl	80024f4 <HAL_RCC_OscConfig>
 8000678:	b108      	cbz	r0, 800067e <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067c:	e7fe      	b.n	800067c <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067e:	210f      	movs	r1, #15
 8000680:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068a:	a803      	add	r0, sp, #12
 800068c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	e9cd 3205 	strd	r3, r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000694:	f002 f946 	bl	8002924 <HAL_RCC_ClockConfig>
 8000698:	b108      	cbz	r0, 800069e <SystemClock_Config+0x96>
 800069a:	b672      	cpsid	i
  while (1)
 800069c:	e7fe      	b.n	800069c <SystemClock_Config+0x94>
}
 800069e:	b014      	add	sp, #80	; 0x50
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <main>:
{
 80006ac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	2400      	movs	r4, #0
{
 80006b2:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
  HAL_Init();
 80006b6:	f000 fcb1 	bl	800101c <HAL_Init>
  SystemClock_Config();
 80006ba:	f7ff ffa5 	bl	8000608 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 80006c2:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	4d92      	ldr	r5, [pc, #584]	; (8000910 <main+0x264>)
 80006c8:	9406      	str	r4, [sp, #24]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	9427      	str	r4, [sp, #156]	; 0x9c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ce:	4891      	ldr	r0, [pc, #580]	; (8000914 <main+0x268>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	632b      	str	r3, [r5, #48]	; 0x30
 80006d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	9306      	str	r3, [sp, #24]
 80006de:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e0:	9407      	str	r4, [sp, #28]
 80006e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	632b      	str	r3, [r5, #48]	; 0x30
 80006ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f0:	9307      	str	r3, [sp, #28]
 80006f2:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	9408      	str	r4, [sp, #32]
 80006f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	632b      	str	r3, [r5, #48]	; 0x30
 80006fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000700:	f003 0301 	and.w	r3, r3, #1
 8000704:	9308      	str	r3, [sp, #32]
 8000706:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	9409      	str	r4, [sp, #36]	; 0x24
 800070a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	632b      	str	r3, [r5, #48]	; 0x30
 8000712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000714:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000718:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000720:	f000 fe70 	bl	8001404 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8000724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	487b      	ldr	r0, [pc, #492]	; (8000918 <main+0x26c>)
  GPIO_InitStruct.Pin = B1_Pin;
 800072a:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072c:	a923      	add	r1, sp, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000732:	9324      	str	r3, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	9425      	str	r4, [sp, #148]	; 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2601      	movs	r6, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000738:	f000 fd72 	bl	8001220 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800073c:	2320      	movs	r3, #32
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800073e:	4875      	ldr	r0, [pc, #468]	; (8000914 <main+0x268>)
 8000740:	a923      	add	r1, sp, #140	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074a:	f000 fd69 	bl	8001220 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800074e:	4873      	ldr	r0, [pc, #460]	; (800091c <main+0x270>)
  huart2.Init.BaudRate = 115200;
 8000750:	4b73      	ldr	r3, [pc, #460]	; (8000920 <main+0x274>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000752:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8000754:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000758:	270c      	movs	r7, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800075a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075e:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.BaudRate = 115200;
 8000762:	e9c0 3800 	strd	r3, r8, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000766:	6147      	str	r7, [r0, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000768:	f002 fcaa 	bl	80030c0 <HAL_UART_Init>
 800076c:	b108      	cbz	r0, 8000772 <main+0xc6>
 800076e:	b672      	cpsid	i
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0xc4>
  hi2c1.Instance = I2C1;
 8000772:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 800094c <main+0x2a0>
  hi2c1.Init.ClockSpeed = 100000;
 8000776:	496b      	ldr	r1, [pc, #428]	; (8000924 <main+0x278>)
 8000778:	4b6b      	ldr	r3, [pc, #428]	; (8000928 <main+0x27c>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800077a:	f8c9 0008 	str.w	r0, [r9, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	e9c9 0007 	strd	r0, r0, [r9, #28]
  hi2c1.Init.ClockSpeed = 100000;
 8000782:	e9c9 1300 	strd	r1, r3, [r9]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	2040      	movs	r0, #64	; 0x40
 8000788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800078c:	e9c9 0303 	strd	r0, r3, [r9, #12]
  hi2c1.Init.OwnAddress2 = 108;
 8000790:	236c      	movs	r3, #108	; 0x6c
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000792:	4648      	mov	r0, r9
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8000794:	f8c9 6014 	str.w	r6, [r9, #20]
  hi2c1.Init.OwnAddress2 = 108;
 8000798:	f8c9 3018 	str.w	r3, [r9, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	f000 fe36 	bl	800140c <HAL_I2C_Init>
 80007a0:	4604      	mov	r4, r0
 80007a2:	b108      	cbz	r0, 80007a8 <main+0xfc>
 80007a4:	b672      	cpsid	i
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <main+0xfa>
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80007a8:	2228      	movs	r2, #40	; 0x28
 80007aa:	4601      	mov	r1, r0
 80007ac:	a823      	add	r0, sp, #140	; 0x8c
 80007ae:	f002 ff9f 	bl	80036f0 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	4857      	ldr	r0, [pc, #348]	; (8000918 <main+0x26c>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007be:	642b      	str	r3, [r5, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80007c8:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	632b      	str	r3, [r5, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 80007da:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80007de:	f043 0302 	orr.w	r3, r3, #2
 80007e2:	632b      	str	r3, [r5, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80007e6:	9718      	str	r7, [sp, #96]	; 0x60
 80007e8:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80007ec:	2505      	movs	r5, #5
 80007ee:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	f04f 0b02 	mov.w	fp, #2
 80007f4:	f04f 0a03 	mov.w	sl, #3
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f8:	a918      	add	r1, sp, #96	; 0x60
  (void)tmpreg;
 80007fa:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80007fc:	951d      	str	r5, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	e9cd ba19 	strd	fp, sl, [sp, #100]	; 0x64
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f002 fe65 	bl	80034d0 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8000806:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	a918      	add	r1, sp, #96	; 0x60
 800080c:	4847      	ldr	r0, [pc, #284]	; (800092c <main+0x280>)
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800080e:	951d      	str	r5, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13;
 8000810:	9318      	str	r3, [sp, #96]	; 0x60
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	e9cd ba19 	strd	fp, sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000816:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081a:	f002 fe59 	bl	80034d0 <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081e:	4a44      	ldr	r2, [pc, #272]	; (8000930 <main+0x284>)
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000820:	4d44      	ldr	r5, [pc, #272]	; (8000934 <main+0x288>)
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	4b45      	ldr	r3, [pc, #276]	; (8000938 <main+0x28c>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000824:	68d2      	ldr	r2, [r2, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	f883 4324 	strb.w	r4, [r3, #804]	; 0x324
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800082a:	2210      	movs	r2, #16
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	4628      	mov	r0, r5
  SPI_InitStruct.CRCPoly = 10;
 8000830:	230a      	movs	r3, #10
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000832:	a923      	add	r1, sp, #140	; 0x8c
  SPI_InitStruct.CRCPoly = 10;
 8000834:	932c      	str	r3, [sp, #176]	; 0xb0
  SPI_InitStruct.Mode = LL_SPI_MODE_SLAVE;
 8000836:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800083a:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800083e:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000842:	9627      	str	r6, [sp, #156]	; 0x9c
  SPI_InitStruct.NSS = LL_SPI_NSS_HARD_INPUT;
 8000844:	9428      	str	r4, [sp, #160]	; 0xa0
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000846:	f002 fee9 	bl	800361c <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800084a:	686b      	ldr	r3, [r5, #4]
  htim3.Init.Prescaler = 49;
 800084c:	4a3b      	ldr	r2, [pc, #236]	; (800093c <main+0x290>)
 800084e:	f023 0310 	bic.w	r3, r3, #16
 8000852:	606b      	str	r3, [r5, #4]
  htim3.Instance = TIM3;
 8000854:	4d3a      	ldr	r5, [pc, #232]	; (8000940 <main+0x294>)
  htim3.Init.Prescaler = 49;
 8000856:	2331      	movs	r3, #49	; 0x31
 8000858:	e9c5 2300 	strd	r2, r3, [r5]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800085c:	4628      	mov	r0, r5
  htim3.Init.Period = 7;
 800085e:	2307      	movs	r3, #7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000860:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8000864:	e9cd 4425 	strd	r4, r4, [sp, #148]	; 0x94
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	60ac      	str	r4, [r5, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086e:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 7;
 8000872:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000874:	f002 fb1a 	bl	8002eac <HAL_TIM_Base_Init>
 8000878:	b108      	cbz	r0, 800087e <main+0x1d2>
 800087a:	b672      	cpsid	i
  while (1)
 800087c:	e7fe      	b.n	800087c <main+0x1d0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800087e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000882:	a923      	add	r1, sp, #140	; 0x8c
 8000884:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000888:	f002 f956 	bl	8002b38 <HAL_TIM_ConfigClockSource>
 800088c:	b108      	cbz	r0, 8000892 <main+0x1e6>
 800088e:	b672      	cpsid	i
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0x1e4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000892:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000896:	a918      	add	r1, sp, #96	; 0x60
 8000898:	4628      	mov	r0, r5
 800089a:	f002 fb35 	bl	8002f08 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	b108      	cbz	r0, 80008a6 <main+0x1fa>
 80008a2:	b672      	cpsid	i
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <main+0x1f8>
  huart1.Instance = USART1;
 80008a6:	4827      	ldr	r0, [pc, #156]	; (8000944 <main+0x298>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008b0:	6103      	str	r3, [r0, #16]
  huart1.Instance = USART1;
 80008b2:	4b25      	ldr	r3, [pc, #148]	; (8000948 <main+0x29c>)
  huart1.Init.BaudRate = 115200;
 80008b4:	f8c0 8004 	str.w	r8, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b8:	6147      	str	r7, [r0, #20]
  huart1.Instance = USART1;
 80008ba:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008bc:	f002 fc00 	bl	80030c0 <HAL_UART_Init>
 80008c0:	4604      	mov	r4, r0
 80008c2:	b108      	cbz	r0, 80008c8 <main+0x21c>
 80008c4:	b672      	cpsid	i
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <main+0x21a>
  I2C_Settings max17261_i2c_settings = {.hi2c = NULL, .i2c_slave_address = MAX17261_I2C_ADDRESS, .i2c_slave_id = I2C_PORT_1, .htim = NULL};
 80008c8:	ab0d      	add	r3, sp, #52	; 0x34
 80008ca:	4601      	mov	r1, r0
 80008cc:	222c      	movs	r2, #44	; 0x2c
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 ff0e 	bl	80036f0 <memset>
 80008d4:	2236      	movs	r2, #54	; 0x36
 80008d6:	7102      	strb	r2, [r0, #4]
  MAX17261_Settings settings = {.i2c_settings = &max17261_i2c_settings};
 80008d8:	9001      	str	r0, [sp, #4]
  max17261_init_reg_map();
 80008da:	f000 f88b 	bl	80009f4 <max17261_init_reg_map>
  max17261_init(&settings, &storage);
 80008de:	a923      	add	r1, sp, #140	; 0x8c
 80008e0:	a801      	add	r0, sp, #4
 80008e2:	f000 f8b5 	bl	8000a50 <max17261_init>
  I2C_Settings pca9555_i2c_settings = {.hi2c = &hi2c1, .i2c_slave_address = PCA9555_I2C_ADDRESS, .i2c_slave_id = I2C_PORT_2, .htim = &htim3};
 80008e6:	4621      	mov	r1, r4
 80008e8:	2228      	movs	r2, #40	; 0x28
 80008ea:	a819      	add	r0, sp, #100	; 0x64
 80008ec:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80008f0:	f002 fefe 	bl	80036f0 <memset>
 80008f4:	f44f 7390 	mov.w	r3, #288	; 0x120
 80008f8:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
  PCA9555_Settings pca9555_settings = {.i2c_settings = &pca9555_i2c_settings};
 80008fc:	ab18      	add	r3, sp, #96	; 0x60
  I2C_Settings pca9555_i2c_settings = {.hi2c = &hi2c1, .i2c_slave_address = PCA9555_I2C_ADDRESS, .i2c_slave_id = I2C_PORT_2, .htim = &htim3};
 80008fe:	951a      	str	r5, [sp, #104]	; 0x68
  PCA9555_Settings pca9555_settings = {.i2c_settings = &pca9555_i2c_settings};
 8000900:	9302      	str	r3, [sp, #8]
  pca9555_init_reg_map();
 8000902:	f000 f919 	bl	8000b38 <pca9555_init_reg_map>
  pca9555_init(&pca9555_settings, &pca9555_storage);
 8000906:	a90a      	add	r1, sp, #40	; 0x28
 8000908:	a802      	add	r0, sp, #8
 800090a:	f000 f933 	bl	8000b74 <pca9555_init>
  while (1)
 800090e:	e7fe      	b.n	800090e <main+0x262>
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000
 8000918:	40020800 	.word	0x40020800
 800091c:	200001f4 	.word	0x200001f4
 8000920:	40004400 	.word	0x40004400
 8000924:	40005400 	.word	0x40005400
 8000928:	000186a0 	.word	0x000186a0
 800092c:	40020400 	.word	0x40020400
 8000930:	e000ed00 	.word	0xe000ed00
 8000934:	40003800 	.word	0x40003800
 8000938:	e000e100 	.word	0xe000e100
 800093c:	40000400 	.word	0x40000400
 8000940:	20000168 	.word	0x20000168
 8000944:	200001b0 	.word	0x200001b0
 8000948:	40011000 	.word	0x40011000
 800094c:	20000114 	.word	0x20000114

08000950 <max17261_process_received_data>:
}

void max17261_process_received_data(I2C_Settings *settings, I2C_FSM *i2c_fsm)
{
    // Only one byte was received, so it was a write before read operation
    if (settings->hi2c->XferCount == settings->hi2c->XferSize - 1)
 8000950:	6803      	ldr	r3, [r0, #0]
 8000952:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8000956:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8000958:	fa1f fc8c 	uxth.w	ip, ip
 800095c:	3a01      	subs	r2, #1
 800095e:	4594      	cmp	ip, r2
 8000960:	d00b      	beq.n	800097a <max17261_process_received_data+0x2a>
        settings->tx_data[1] = (uint8_t)((data >> 8) & 0xFF);

        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_RX;
    }
    // Handling a multi-byte write operation
    else if (settings->hi2c->XferCount == 0)
 8000962:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8000964:	b292      	uxth	r2, r2
 8000966:	b92a      	cbnz	r2, 8000974 <max17261_process_received_data+0x24>
    {
        if (i2c_fsm->i2c_slave_state == MAX17261_SLAVE_RX)
 8000968:	780a      	ldrb	r2, [r1, #0]
 800096a:	2a07      	cmp	r2, #7
 800096c:	d016      	beq.n	800099c <max17261_process_received_data+0x4c>
            {
                settings->max17261_reg_map[reg_to_write].register_value = data_to_write;
            }
        }

        i2c_fsm->i2c_slave_select = I2C_NO_SLAVE;
 800096e:	2200      	movs	r2, #0
 8000970:	704a      	strb	r2, [r1, #1]
        i2c_fsm->i2c_slave_state = I2C_IDLE;
 8000972:	700a      	strb	r2, [r1, #0]
    }

    // memset(settings->rx_data, 0, settings->rx_buffer_size);

    HAL_I2C_EnableListen_IT(settings->hi2c);
 8000974:	4618      	mov	r0, r3
 8000976:	f000 be95 	b.w	80016a4 <HAL_I2C_EnableListen_IT>
        uint8_t reg_to_read = settings->rx_data[0];
 800097a:	68c2      	ldr	r2, [r0, #12]
        uint16_t data = settings->max17261_reg_map[reg_to_read].register_value;
 800097c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800097e:	f892 c000 	ldrb.w	ip, [r2]
        settings->tx_data[0] = (uint8_t)(data & 0xFF);
 8000982:	6942      	ldr	r2, [r0, #20]
        uint16_t data = settings->max17261_reg_map[reg_to_read].register_value;
 8000984:	f833 301c 	ldrh.w	r3, [r3, ip, lsl #1]
        settings->tx_data[0] = (uint8_t)(data & 0xFF);
 8000988:	7013      	strb	r3, [r2, #0]
        settings->tx_data[1] = (uint8_t)((data >> 8) & 0xFF);
 800098a:	6942      	ldr	r2, [r0, #20]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	7053      	strb	r3, [r2, #1]
        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_RX;
 8000990:	2307      	movs	r3, #7
 8000992:	700b      	strb	r3, [r1, #0]
    HAL_I2C_EnableListen_IT(settings->hi2c);
 8000994:	6803      	ldr	r3, [r0, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 be84 	b.w	80016a4 <HAL_I2C_EnableListen_IT>
{
 800099c:	b410      	push	{r4}
            uint8_t reg_to_write = settings->rx_data[0];
 800099e:	68c4      	ldr	r4, [r0, #12]
 80009a0:	7822      	ldrb	r2, [r4, #0]
            if (reg_to_write != MAX17261_MODEL_I_CFG)
 80009a2:	2adb      	cmp	r2, #219	; 0xdb
 80009a4:	d004      	beq.n	80009b0 <max17261_process_received_data+0x60>
                settings->max17261_reg_map[reg_to_write].register_value = data_to_write;
 80009a6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80009a8:	f8b4 4001 	ldrh.w	r4, [r4, #1]
 80009ac:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
        i2c_fsm->i2c_slave_select = I2C_NO_SLAVE;
 80009b0:	2200      	movs	r2, #0
}
 80009b2:	f85d 4b04 	ldr.w	r4, [sp], #4
        i2c_fsm->i2c_slave_select = I2C_NO_SLAVE;
 80009b6:	704a      	strb	r2, [r1, #1]
        i2c_fsm->i2c_slave_state = I2C_IDLE;
 80009b8:	700a      	strb	r2, [r1, #0]
    HAL_I2C_EnableListen_IT(settings->hi2c);
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 be72 	b.w	80016a4 <HAL_I2C_EnableListen_IT>

080009c0 <max17261_process_address>:

void max17261_process_address(I2C_Settings *settings, I2C_FSM *i2c_fsm, I2C_Callback_Info *cb_info)
{
 80009c0:	b510      	push	{r4, lr}
    uint8_t i2c_slave_address = cb_info->i2c_slave_address;
    uint8_t transfer_direction = cb_info->transfer_direction;
 80009c2:	7813      	ldrb	r3, [r2, #0]

    if (transfer_direction == I2C_TX)
 80009c4:	2b01      	cmp	r3, #1
{
 80009c6:	460c      	mov	r4, r1
    if (transfer_direction == I2C_TX)
 80009c8:	d00a      	beq.n	80009e0 <max17261_process_address+0x20>
        HAL_I2C_Slave_Seq_Receive_IT(settings->hi2c, settings->rx_data, MAX17261_I2C_NUM_BYTES_TO_RECEIVE, I2C_FIRST_FRAME);

        i2c_fsm->i2c_slave_select = MAX17261;
        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_RX;
    }
    else if (transfer_direction == I2C_RX)
 80009ca:	b103      	cbz	r3, 80009ce <max17261_process_address+0xe>
        // Master is requesting data and slave needs to send
        HAL_I2C_Slave_Seq_Transmit_IT(settings->hi2c, settings->tx_data, MAX17261_I2C_NUM_BYTES_TO_SEND, I2C_FIRST_AND_LAST_FRAME);

        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_TX;
    }
}
 80009cc:	bd10      	pop	{r4, pc}
        HAL_I2C_Slave_Seq_Transmit_IT(settings->hi2c, settings->tx_data, MAX17261_I2C_NUM_BYTES_TO_SEND, I2C_FIRST_AND_LAST_FRAME);
 80009ce:	6941      	ldr	r1, [r0, #20]
 80009d0:	6800      	ldr	r0, [r0, #0]
 80009d2:	2308      	movs	r3, #8
 80009d4:	2203      	movs	r2, #3
 80009d6:	f000 fde1 	bl	800159c <HAL_I2C_Slave_Seq_Transmit_IT>
        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_TX;
 80009da:	2308      	movs	r3, #8
 80009dc:	7023      	strb	r3, [r4, #0]
}
 80009de:	bd10      	pop	{r4, pc}
        HAL_I2C_Slave_Seq_Receive_IT(settings->hi2c, settings->rx_data, MAX17261_I2C_NUM_BYTES_TO_RECEIVE, I2C_FIRST_FRAME);
 80009e0:	68c1      	ldr	r1, [r0, #12]
 80009e2:	6800      	ldr	r0, [r0, #0]
 80009e4:	2203      	movs	r2, #3
 80009e6:	f000 fe1b 	bl	8001620 <HAL_I2C_Slave_Seq_Receive_IT>
        i2c_fsm->i2c_slave_select = MAX17261;
 80009ea:	2202      	movs	r2, #2
        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_RX;
 80009ec:	2307      	movs	r3, #7
        i2c_fsm->i2c_slave_select = MAX17261;
 80009ee:	7062      	strb	r2, [r4, #1]
        i2c_fsm->i2c_slave_state = MAX17261_SLAVE_RX;
 80009f0:	7023      	strb	r3, [r4, #0]
}
 80009f2:	bd10      	pop	{r4, pc}

080009f4 <max17261_init_reg_map>:
    for (uint8_t i = 0; i < MAX17261_NUM_REGISTERS; i++)
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <max17261_init_reg_map+0x58>)
{
 80009f6:	2300      	movs	r3, #0
 80009f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009fa:	f8b0 c000 	ldrh.w	ip, [r0]
 80009fe:	2201      	movs	r2, #1
 8000a00:	461c      	mov	r4, r3
            initial_max17261_reg_map[i].register_value = MAX17261_REG_DEFAULT_VAL;
 8000a02:	469e      	mov	lr, r3
            initial_max17261_reg_map[i].register_value = MAX17261_TEMP_REG_DEFAULT_VAL;
 8000a04:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
            initial_max17261_reg_map[i].register_value = MAX17261_CURRENT_REG_DEFAULT_VAL;
 8000a08:	2664      	movs	r6, #100	; 0x64
            initial_max17261_reg_map[i].register_value = MAX17261_VCELL_REG_DEFAULT_VAL;
 8000a0a:	f44f 45c8 	mov.w	r5, #25600	; 0x6400
 8000a0e:	e00c      	b.n	8000a2a <max17261_init_reg_map+0x36>
        else if (i == MAX17261_VCELL)
 8000a10:	2909      	cmp	r1, #9
 8000a12:	d011      	beq.n	8000a38 <max17261_init_reg_map+0x44>
        else if (i == MAX17261_CURRENT)
 8000a14:	290a      	cmp	r1, #10
 8000a16:	d011      	beq.n	8000a3c <max17261_init_reg_map+0x48>
        else if (i == MAX17261_TEMP)
 8000a18:	2908      	cmp	r1, #8
 8000a1a:	d011      	beq.n	8000a40 <max17261_init_reg_map+0x4c>
    for (uint8_t i = 0; i < MAX17261_NUM_REGISTERS; i++)
 8000a1c:	2aff      	cmp	r2, #255	; 0xff
            initial_max17261_reg_map[i].register_value = MAX17261_REG_DEFAULT_VAL;
 8000a1e:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
    for (uint8_t i = 0; i < MAX17261_NUM_REGISTERS; i++)
 8000a22:	d00f      	beq.n	8000a44 <max17261_init_reg_map+0x50>
 8000a24:	3201      	adds	r2, #1
 8000a26:	3301      	adds	r3, #1
 8000a28:	b2d2      	uxtb	r2, r2
        else if (i == MAX17261_CURRENT)
 8000a2a:	b2d9      	uxtb	r1, r3
        if (i == MAX17261_STATUS)
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1ef      	bne.n	8000a10 <max17261_init_reg_map+0x1c>
 8000a30:	2401      	movs	r4, #1
            initial_max17261_reg_map[i].register_value = MAX17261_STATUS_REG_DEFAULT_VAL;
 8000a32:	f04f 0c02 	mov.w	ip, #2
    for (uint8_t i = 0; i < MAX17261_NUM_REGISTERS; i++)
 8000a36:	e7f5      	b.n	8000a24 <max17261_init_reg_map+0x30>
            initial_max17261_reg_map[i].register_value = MAX17261_VCELL_REG_DEFAULT_VAL;
 8000a38:	8245      	strh	r5, [r0, #18]
 8000a3a:	e7f3      	b.n	8000a24 <max17261_init_reg_map+0x30>
            initial_max17261_reg_map[i].register_value = MAX17261_CURRENT_REG_DEFAULT_VAL;
 8000a3c:	8286      	strh	r6, [r0, #20]
 8000a3e:	e7f1      	b.n	8000a24 <max17261_init_reg_map+0x30>
            initial_max17261_reg_map[i].register_value = MAX17261_TEMP_REG_DEFAULT_VAL;
 8000a40:	8207      	strh	r7, [r0, #16]
 8000a42:	e7ef      	b.n	8000a24 <max17261_init_reg_map+0x30>
 8000a44:	b10c      	cbz	r4, 8000a4a <max17261_init_reg_map+0x56>
 8000a46:	f8a0 c000 	strh.w	ip, [r0]
}
 8000a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a4c:	20000238 	.word	0x20000238

08000a50 <max17261_init>:
{
 8000a50:	b510      	push	{r4, lr}
    settings->i2c_settings->rx_buffer_size = MAX17261_I2C_RX_BUFFER_SIZE;
 8000a52:	f04f 0c03 	mov.w	ip, #3
{
 8000a56:	4604      	mov	r4, r0
    settings->i2c_settings->rx_data = storage->rx_data;
 8000a58:	6800      	ldr	r0, [r0, #0]
    settings->i2c_settings->tx_data = storage->tx_data;
 8000a5a:	eb01 020c 	add.w	r2, r1, ip
    memcpy(storage->max17261_reg_map, &initial_max17261_reg_map, sizeof(initial_max17261_reg_map));
 8000a5e:	1d8b      	adds	r3, r1, #6
{
 8000a60:	b082      	sub	sp, #8
    settings->i2c_settings->rx_data = storage->rx_data;
 8000a62:	60c1      	str	r1, [r0, #12]
    settings->i2c_settings->rx_buffer_size = MAX17261_I2C_RX_BUFFER_SIZE;
 8000a64:	f880 c010 	strb.w	ip, [r0, #16]
    settings->i2c_settings->tx_data = storage->tx_data;
 8000a68:	6142      	str	r2, [r0, #20]
    settings->i2c_settings->tx_buffer_size = MAX17261_I2C_TX_BUFFER_SIZE;
 8000a6a:	f880 c018 	strb.w	ip, [r0, #24]
    memcpy(storage->max17261_reg_map, &initial_max17261_reg_map, sizeof(initial_max17261_reg_map));
 8000a6e:	490c      	ldr	r1, [pc, #48]	; (8000aa0 <max17261_init+0x50>)
 8000a70:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fe2d 	bl	80036d4 <memcpy>
    I2C_Callbacks i2c_callbacks = {.i2c_process_received_data = max17261_process_received_data, .i2c_process_address = max17261_process_address};
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <max17261_init+0x54>)
    settings->i2c_settings->max17261_reg_map = &(storage->max17261_reg_map);
 8000a7c:	6824      	ldr	r4, [r4, #0]
    memcpy(storage->max17261_reg_map, &initial_max17261_reg_map, sizeof(initial_max17261_reg_map));
 8000a7e:	4603      	mov	r3, r0
    I2C_Callbacks i2c_callbacks = {.i2c_process_received_data = max17261_process_received_data, .i2c_process_address = max17261_process_address};
 8000a80:	e892 0003 	ldmia.w	r2, {r0, r1}
    settings->i2c_settings->max17261_num_registers = MAX17261_NUM_REGISTERS;
 8000a84:	f04f 0cff 	mov.w	ip, #255	; 0xff
    I2C_Callbacks i2c_callbacks = {.i2c_process_received_data = max17261_process_received_data, .i2c_process_address = max17261_process_address};
 8000a88:	466a      	mov	r2, sp
 8000a8a:	e882 0003 	stmia.w	r2, {r0, r1}
    settings->i2c_settings->max17261_num_registers = MAX17261_NUM_REGISTERS;
 8000a8e:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
    settings->i2c_settings->max17261_reg_map = &(storage->max17261_reg_map);
 8000a92:	6263      	str	r3, [r4, #36]	; 0x24
    i2c_init(settings->i2c_settings, MAX17261, &i2c_callbacks);
 8000a94:	4620      	mov	r0, r4
 8000a96:	2102      	movs	r1, #2
 8000a98:	f7ff fd1e 	bl	80004d8 <i2c_init>
}
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd10      	pop	{r4, pc}
 8000aa0:	20000238 	.word	0x20000238
 8000aa4:	08003718 	.word	0x08003718

08000aa8 <pca9555_process_received_data>:
}

void pca9555_process_received_data(I2C_Settings *settings, I2C_FSM *i2c_fsm)
{
    // Only one byte was received, so it was a write before read operation
    if (settings->hi2c->XferCount == settings->hi2c->XferSize - 1)
 8000aa8:	6803      	ldr	r3, [r0, #0]
 8000aaa:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8000aae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8000ab0:	fa1f fc8c 	uxth.w	ip, ip
 8000ab4:	3a01      	subs	r2, #1
 8000ab6:	4594      	cmp	ip, r2
 8000ab8:	d012      	beq.n	8000ae0 <pca9555_process_received_data+0x38>
        settings->tx_data[0] = settings->pca9555_reg_map[reg_to_read].register_value;

        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_RX;
    }
    // Handling a multi-byte write operation
    else if (settings->hi2c->XferCount == 0)
 8000aba:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8000abc:	b292      	uxth	r2, r2
 8000abe:	b962      	cbnz	r2, 8000ada <pca9555_process_received_data+0x32>
    {
        if (i2c_fsm->i2c_slave_state == PCA9555_SLAVE_RX)
 8000ac0:	780a      	ldrb	r2, [r1, #0]
 8000ac2:	2a03      	cmp	r2, #3
 8000ac4:	d106      	bne.n	8000ad4 <pca9555_process_received_data+0x2c>
        {
            // Write the value into the register map
            uint8_t reg_to_write = settings->rx_data[0];
 8000ac6:	68c2      	ldr	r2, [r0, #12]
            uint8_t data_to_write = settings->rx_data[1];
            settings->pca9555_reg_map[reg_to_write].register_value = data_to_write;
 8000ac8:	69c0      	ldr	r0, [r0, #28]
            uint8_t data_to_write = settings->rx_data[1];
 8000aca:	f892 c001 	ldrb.w	ip, [r2, #1]
            settings->pca9555_reg_map[reg_to_write].register_value = data_to_write;
 8000ace:	7812      	ldrb	r2, [r2, #0]
 8000ad0:	f800 c002 	strb.w	ip, [r0, r2]
        }

        i2c_fsm->i2c_slave_select = I2C_NO_SLAVE;
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	704a      	strb	r2, [r1, #1]
        i2c_fsm->i2c_slave_state = I2C_IDLE;
 8000ad8:	700a      	strb	r2, [r1, #0]
    }

    // memset(settings->rx_data, 0, settings->rx_buffer_size);

    HAL_I2C_EnableListen_IT(settings->hi2c);
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 bde2 	b.w	80016a4 <HAL_I2C_EnableListen_IT>
{
 8000ae0:	b410      	push	{r4}
        uint8_t reg_to_read = settings->rx_data[0];
 8000ae2:	68c3      	ldr	r3, [r0, #12]
        settings->tx_data[0] = settings->pca9555_reg_map[reg_to_read].register_value;
 8000ae4:	69c4      	ldr	r4, [r0, #28]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	6942      	ldr	r2, [r0, #20]
 8000aea:	f814 c003 	ldrb.w	ip, [r4, r3]
 8000aee:	f882 c000 	strb.w	ip, [r2]
        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_RX;
 8000af2:	2303      	movs	r3, #3
 8000af4:	700b      	strb	r3, [r1, #0]
    HAL_I2C_EnableListen_IT(settings->hi2c);
 8000af6:	6803      	ldr	r3, [r0, #0]
}
 8000af8:	f85d 4b04 	ldr.w	r4, [sp], #4
    HAL_I2C_EnableListen_IT(settings->hi2c);
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 bdd1 	b.w	80016a4 <HAL_I2C_EnableListen_IT>
 8000b02:	bf00      	nop

08000b04 <pca9555_process_address>:

void pca9555_process_address(I2C_Settings *settings, I2C_FSM *i2c_fsm, I2C_Callback_Info *cb_info)
{
 8000b04:	b538      	push	{r3, r4, r5, lr}
    uint8_t i2c_slave_address = cb_info->i2c_slave_address;
    uint8_t transfer_direction = cb_info->transfer_direction;
 8000b06:	7815      	ldrb	r5, [r2, #0]

    if (transfer_direction == I2C_TX)
 8000b08:	2d01      	cmp	r5, #1
{
 8000b0a:	460c      	mov	r4, r1
    if (transfer_direction == I2C_TX)
 8000b0c:	d00a      	beq.n	8000b24 <pca9555_process_address+0x20>
        HAL_I2C_Slave_Seq_Receive_IT(settings->hi2c, settings->rx_data, PCA9555_I2C_NUM_BYTES_TO_RECEIVE, I2C_FIRST_FRAME);

        i2c_fsm->i2c_slave_select = PCA9555;
        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_RX;
    }
    else if (transfer_direction == I2C_RX)
 8000b0e:	b105      	cbz	r5, 8000b12 <pca9555_process_address+0xe>
        // Master is requesting data and slave needs to send
        HAL_I2C_Slave_Seq_Transmit_IT(settings->hi2c, settings->tx_data, PCA9555_I2C_NUM_BYTES_TO_SEND, I2C_FIRST_AND_LAST_FRAME);

        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_TX;
    }
}
 8000b10:	bd38      	pop	{r3, r4, r5, pc}
        HAL_I2C_Slave_Seq_Transmit_IT(settings->hi2c, settings->tx_data, PCA9555_I2C_NUM_BYTES_TO_SEND, I2C_FIRST_AND_LAST_FRAME);
 8000b12:	6941      	ldr	r1, [r0, #20]
 8000b14:	6800      	ldr	r0, [r0, #0]
 8000b16:	2308      	movs	r3, #8
 8000b18:	2202      	movs	r2, #2
 8000b1a:	f000 fd3f 	bl	800159c <HAL_I2C_Slave_Seq_Transmit_IT>
        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_TX;
 8000b1e:	2304      	movs	r3, #4
 8000b20:	7023      	strb	r3, [r4, #0]
}
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
        HAL_I2C_Slave_Seq_Receive_IT(settings->hi2c, settings->rx_data, PCA9555_I2C_NUM_BYTES_TO_RECEIVE, I2C_FIRST_FRAME);
 8000b24:	68c1      	ldr	r1, [r0, #12]
 8000b26:	6800      	ldr	r0, [r0, #0]
 8000b28:	462b      	mov	r3, r5
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	f000 fd78 	bl	8001620 <HAL_I2C_Slave_Seq_Receive_IT>
        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_RX;
 8000b30:	2303      	movs	r3, #3
        i2c_fsm->i2c_slave_select = PCA9555;
 8000b32:	7065      	strb	r5, [r4, #1]
        i2c_fsm->i2c_slave_state = PCA9555_SLAVE_RX;
 8000b34:	7023      	strb	r3, [r4, #0]
}
 8000b36:	bd38      	pop	{r3, r4, r5, pc}

08000b38 <pca9555_init_reg_map>:
{
 8000b38:	2300      	movs	r3, #0
 8000b3a:	b500      	push	{lr}
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <pca9555_init_reg_map+0x38>)
 8000b3e:	2201      	movs	r2, #1
            initial_pca9555_reg_map[i].register_value = PCA9555_REG_DEFAULT_VAL;
 8000b40:	469c      	mov	ip, r3
            initial_pca9555_reg_map[i].register_value = PCA9555_CONFIGURATION_0_REG_DEFAULT_VAL;
 8000b42:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8000b46:	e008      	b.n	8000b5a <pca9555_init_reg_map+0x22>
        else if (i == PCA9555_CONFIGURATION_1)
 8000b48:	2907      	cmp	r1, #7
 8000b4a:	d00c      	beq.n	8000b66 <pca9555_init_reg_map+0x2e>
    for (uint8_t i = 0; i < PCA9555_NUM_REGISTERS; i++)
 8000b4c:	2a08      	cmp	r2, #8
            initial_pca9555_reg_map[i].register_value = PCA9555_REG_DEFAULT_VAL;
 8000b4e:	f800 c003 	strb.w	ip, [r0, r3]
    for (uint8_t i = 0; i < PCA9555_NUM_REGISTERS; i++)
 8000b52:	d00a      	beq.n	8000b6a <pca9555_init_reg_map+0x32>
 8000b54:	3201      	adds	r2, #1
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2d2      	uxtb	r2, r2
        if (i == PCA9555_CONFIGURATION_0)
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	b2d9      	uxtb	r1, r3
 8000b5e:	d1f3      	bne.n	8000b48 <pca9555_init_reg_map+0x10>
            initial_pca9555_reg_map[i].register_value = PCA9555_CONFIGURATION_0_REG_DEFAULT_VAL;
 8000b60:	f880 e006 	strb.w	lr, [r0, #6]
    for (uint8_t i = 0; i < PCA9555_NUM_REGISTERS; i++)
 8000b64:	e7f6      	b.n	8000b54 <pca9555_init_reg_map+0x1c>
            initial_pca9555_reg_map[i].register_value = PCA9555_CONFIGURATION_1_REG_DEFAULT_VAL;
 8000b66:	23ff      	movs	r3, #255	; 0xff
 8000b68:	71c3      	strb	r3, [r0, #7]
}
 8000b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b6e:	bf00      	nop
 8000b70:	20000438 	.word	0x20000438

08000b74 <pca9555_init>:
{
 8000b74:	b530      	push	{r4, r5, lr}
 8000b76:	460b      	mov	r3, r1
 8000b78:	4602      	mov	r2, r0
    settings->i2c_settings->rx_buffer_size = PCA9555_I2C_RX_BUFFER_SIZE;
 8000b7a:	2102      	movs	r1, #2
    settings->i2c_settings->rx_data = storage->rx_data;
 8000b7c:	6800      	ldr	r0, [r0, #0]
    I2C_Callbacks i2c_callbacks = {.i2c_process_received_data = pca9555_process_received_data, .i2c_process_address = pca9555_process_address};
 8000b7e:	4d0e      	ldr	r5, [pc, #56]	; (8000bb8 <pca9555_init+0x44>)
    settings->i2c_settings->rx_buffer_size = PCA9555_I2C_RX_BUFFER_SIZE;
 8000b80:	7401      	strb	r1, [r0, #16]
    settings->i2c_settings->tx_data = storage->tx_data;
 8000b82:	185c      	adds	r4, r3, r1
 8000b84:	6144      	str	r4, [r0, #20]
    memcpy(storage->pca9555_reg_map, &initial_pca9555_reg_map, sizeof(initial_pca9555_reg_map));
 8000b86:	4c0d      	ldr	r4, [pc, #52]	; (8000bbc <pca9555_init+0x48>)
    settings->i2c_settings->tx_buffer_size = PCA9555_I2C_TX_BUFFER_SIZE;
 8000b88:	7601      	strb	r1, [r0, #24]
    settings->i2c_settings->rx_data = storage->rx_data;
 8000b8a:	60c3      	str	r3, [r0, #12]
    memcpy(storage->pca9555_reg_map, &initial_pca9555_reg_map, sizeof(initial_pca9555_reg_map));
 8000b8c:	cc03      	ldmia	r4!, {r0, r1}
 8000b8e:	6058      	str	r0, [r3, #4]
 8000b90:	6099      	str	r1, [r3, #8]
    I2C_Callbacks i2c_callbacks = {.i2c_process_received_data = pca9555_process_received_data, .i2c_process_address = pca9555_process_address};
 8000b92:	e895 0003 	ldmia.w	r5, {r0, r1}
{
 8000b96:	b083      	sub	sp, #12
    memcpy(storage->pca9555_reg_map, &initial_pca9555_reg_map, sizeof(initial_pca9555_reg_map));
 8000b98:	1d1c      	adds	r4, r3, #4
    settings->i2c_settings->pca9555_reg_map = &(storage->pca9555_reg_map);
 8000b9a:	6813      	ldr	r3, [r2, #0]
    settings->i2c_settings->pca9555_num_registers = PCA9555_NUM_REGISTERS;
 8000b9c:	2508      	movs	r5, #8
    I2C_Callbacks i2c_callbacks = {.i2c_process_received_data = pca9555_process_received_data, .i2c_process_address = pca9555_process_address};
 8000b9e:	466a      	mov	r2, sp
 8000ba0:	e882 0003 	stmia.w	r2, {r0, r1}
    settings->i2c_settings->pca9555_num_registers = PCA9555_NUM_REGISTERS;
 8000ba4:	f883 5020 	strb.w	r5, [r3, #32]
    settings->i2c_settings->pca9555_reg_map = &(storage->pca9555_reg_map);
 8000ba8:	61dc      	str	r4, [r3, #28]
    i2c_init(settings->i2c_settings, PCA9555, &i2c_callbacks);
 8000baa:	4618      	mov	r0, r3
 8000bac:	2101      	movs	r1, #1
 8000bae:	f7ff fc93 	bl	80004d8 <i2c_init>
}
 8000bb2:	b003      	add	sp, #12
 8000bb4:	bd30      	pop	{r4, r5, pc}
 8000bb6:	bf00      	nop
 8000bb8:	08003720 	.word	0x08003720
 8000bbc:	20000438 	.word	0x20000438

08000bc0 <spi2_rx_cb>:
	LL_SPI_EnableIT_ERR(settings->spi_handle);
	LL_SPI_Enable(settings->spi_handle);
}

void spi2_rx_cb(SPI_TypeDef *spi_handle)
{
 8000bc0:	b538      	push	{r3, r4, r5, lr}
	uint8_t spi_index = SPI_PORT_2;

	if (spi_fsm_state[spi_index].spi_slave_state == SPI_TRANSACTION)
 8000bc2:	4d16      	ldr	r5, [pc, #88]	; (8000c1c <spi2_rx_cb+0x5c>)
	{
		__HAL_TIM_SET_COUNTER(spi_settings[spi_index].timer_handle, 0);
 8000bc4:	4c16      	ldr	r4, [pc, #88]	; (8000c20 <spi2_rx_cb+0x60>)
	if (spi_fsm_state[spi_index].spi_slave_state == SPI_TRANSACTION)
 8000bc6:	78ab      	ldrb	r3, [r5, #2]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d122      	bne.n	8000c12 <spi2_rx_cb+0x52>
		__HAL_TIM_SET_COUNTER(spi_settings[spi_index].timer_handle, 0);
 8000bcc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	; 0x24
	else
	{
		HAL_TIM_Base_Start_IT(spi_settings[spi_index].timer_handle);
	}

	uint8_t next_index = spi_settings[spi_index].rx_index;
 8000bd4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
	if (next_index >= spi_settings[spi_index].rx_buffer_size)
 8000bd8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
	{
		next_index = 0;
	}

	spi_settings[spi_index].rx_data[next_index] = LL_SPI_ReceiveData8(spi_settings[spi_index].spi_handle);
 8000bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (next_index >= spi_settings[spi_index].rx_buffer_size)
 8000bde:	429a      	cmp	r2, r3
 8000be0:	bf98      	it	ls
 8000be2:	2300      	movls	r3, #0
	spi_settings[spi_index].rx_data[next_index] = LL_SPI_ReceiveData8(spi_settings[spi_index].spi_handle);
 8000be4:	6b22      	ldr	r2, [r4, #48]	; 0x30
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
  return (*((__IO uint8_t *)&SPIx->DR));
 8000be6:	7b09      	ldrb	r1, [r1, #12]
 8000be8:	54d1      	strb	r1, [r2, r3]
	spi_settings[spi_index].rx_index += 1;
 8000bea:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

	// Process the byte if it is the first byte (command byte) or an important byte
	if (spi_settings[spi_index].rx_index == 1 || spi_settings[spi_index].rx_byte_callback)
 8000bf6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d002      	beq.n	8000c04 <spi2_rx_cb+0x44>
 8000bfe:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000c02:	b11b      	cbz	r3, 8000c0c <spi2_rx_cb+0x4c>
	{
		spi_process_byte(&(spi_settings[spi_index]));
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <spi2_rx_cb+0x64>)
 8000c06:	4808      	ldr	r0, [pc, #32]	; (8000c28 <spi2_rx_cb+0x68>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4798      	blx	r3
	}

	spi_fsm_state[spi_index].spi_slave_state = SPI_TRANSACTION;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	70ab      	strb	r3, [r5, #2]
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
		HAL_TIM_Base_Start_IT(spi_settings[spi_index].timer_handle);
 8000c12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000c14:	f001 ff44 	bl	8002aa0 <HAL_TIM_Base_Start_IT>
 8000c18:	e7dc      	b.n	8000bd4 <spi2_rx_cb+0x14>
 8000c1a:	bf00      	nop
 8000c1c:	20000440 	.word	0x20000440
 8000c20:	2000044c 	.word	0x2000044c
 8000c24:	20000444 	.word	0x20000444
 8000c28:	20000470 	.word	0x20000470

08000c2c <spi2_tx_cb>:

void spi2_tx_cb(SPI_TypeDef *spi_handle)
{
 8000c2c:	b410      	push	{r4}
	uint8_t spi_index = SPI_PORT_2;

	if (spi_settings[spi_index].tx_index < spi_settings[spi_index].bytes_to_send)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <spi2_tx_cb+0x58>)
 8000c30:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8000c34:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000c38:	4291      	cmp	r1, r2
 8000c3a:	d20f      	bcs.n	8000c5c <spi2_tx_cb+0x30>
	{
		uint8_t next_index = spi_settings[spi_index].tx_index;
 8000c3c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
		LL_SPI_TransmitData8(spi_settings[spi_index].spi_handle, spi_settings[spi_index].tx_data[next_index]);
 8000c40:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c42:	6b9c      	ldr	r4, [r3, #56]	; 0x38
		uint8_t next_index = spi_settings[spi_index].tx_index;
 8000c44:	b2d1      	uxtb	r1, r2
		LL_SPI_TransmitData8(spi_settings[spi_index].spi_handle, spi_settings[spi_index].tx_data[next_index]);
 8000c46:	5ca2      	ldrb	r2, [r4, r2]
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
  *spidr = TxData;
 8000c48:	7302      	strb	r2, [r0, #12]
		spi_settings[spi_index].tx_data[next_index] = 0;
 8000c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	5450      	strb	r0, [r2, r1]
		spi_settings[spi_index].tx_index += 1;
 8000c50:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8000c54:	3201      	adds	r2, #1
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}

	if (spi_settings[spi_index].tx_index == spi_settings[spi_index].bytes_to_send)
 8000c5c:	f893 103c 	ldrb.w	r1, [r3, #60]	; 0x3c
 8000c60:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000c64:	4291      	cmp	r1, r2
 8000c66:	d109      	bne.n	8000c7c <spi2_tx_cb+0x50>
	{
		spi_settings[spi_index].tx_index = 0;
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		spi_settings[spi_index].bytes_to_send = 0;
 8000c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		LL_SPI_DisableIT_TXE(spi_settings[spi_index].spi_handle);
 8000c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8000c74:	6853      	ldr	r3, [r2, #4]
 8000c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c7a:	6053      	str	r3, [r2, #4]
	}
	// spi_fsm_state[spi_index].spi_slave_state = SPI_SLAVE_TX;
}
 8000c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	2000044c 	.word	0x2000044c

08000c88 <spi2_transfererror_cb>:
void spi2_transfererror_cb(SPI_TypeDef *spi_handle)
{
	// TODO: Handle errors in SPI transmission
	uint8_t spi_index = SPI_PORT_2;
	// spi_fsm_state[spi_index].spi_slave_state = SPI_ERROR;
}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <HAL_TIM_PeriodElapsedCallback>:

// Timer to re-enable listening for SPI messages
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	// Check for end of SPI Rx Transaction
	if (htim == &htim3)
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d000      	beq.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x8>
 8000c92:	4770      	bx	lr
{
 8000c94:	b570      	push	{r4, r5, r6, lr}
	{
		uint8_t spi_index = SPI_PORT_2;
		if (spi_fsm_state[spi_index].spi_slave_state == SPI_TRANSACTION)
 8000c96:	4d0f      	ldr	r5, [pc, #60]	; (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c98:	78ab      	ldrb	r3, [r5, #2]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d000      	beq.n	8000ca0 <HAL_TIM_PeriodElapsedCallback+0x14>
				spi_settings[spi_index].bytes_to_send = 0;
				spi_fsm_state[spi_index].spi_slave_state = SPI_IDLE;
			}
		}
	}
}
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ca2:	691b      	ldr	r3, [r3, #16]
			if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12))
 8000ca4:	04db      	lsls	r3, r3, #19
 8000ca6:	d5fa      	bpl.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x12>
				spi_process_received_data(&(spi_settings[spi_index]));
 8000ca8:	4e0c      	ldr	r6, [pc, #48]	; (8000cdc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cac:	4604      	mov	r4, r0
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8000cb4:	4798      	blx	r3
				HAL_TIM_Base_Stop_IT(&htim3);
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f001 ff26 	bl	8002b08 <HAL_TIM_Base_Stop_IT>
				spi_settings[spi_index].rx_index = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
				spi_settings[spi_index].tx_index = 0;
 8000cc2:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
				spi_settings[spi_index].bytes_to_send = 0;
 8000cc6:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
				spi_fsm_state[spi_index].spi_slave_state = SPI_IDLE;
 8000cca:	70ab      	strb	r3, [r5, #2]
}
 8000ccc:	bd70      	pop	{r4, r5, r6, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000168 	.word	0x20000168
 8000cd4:	20000440 	.word	0x20000440
 8000cd8:	40020400 	.word	0x40020400
 8000cdc:	2000044c 	.word	0x2000044c
 8000ce0:	20000448 	.word	0x20000448

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <HAL_MspInit+0x38>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	9100      	str	r1, [sp, #0]
 8000cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cf2:	645a      	str	r2, [r3, #68]	; 0x44
 8000cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cf6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000cfa:	9200      	str	r2, [sp, #0]
 8000cfc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	9101      	str	r1, [sp, #4]
 8000d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	9301      	str	r3, [sp, #4]
 8000d10:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d12:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d14:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d16:	f000 b9ad 	b.w	8001074 <HAL_NVIC_SetPriorityGrouping>
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d20:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_I2C_MspInit+0x88>)
 8000d24:	6802      	ldr	r2, [r0, #0]
{
 8000d26:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8000d2a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000d30:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000d34:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000d36:	d001      	beq.n	8000d3c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d38:	b009      	add	sp, #36	; 0x24
 8000d3a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4d1b      	ldr	r5, [pc, #108]	; (8000dac <HAL_I2C_MspInit+0x8c>)
 8000d3e:	9401      	str	r4, [sp, #4]
 8000d40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	481b      	ldr	r0, [pc, #108]	; (8000db0 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	632b      	str	r3, [r5, #48]	; 0x30
 8000d4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5a:	f04f 0c03 	mov.w	ip, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d60:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d62:	2304      	movs	r3, #4
 8000d64:	e9cd c306 	strd	ip, r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f000 fa59 	bl	8001220 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6e:	9402      	str	r4, [sp, #8]
 8000d70:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d76:	642b      	str	r3, [r5, #64]	; 0x40
 8000d78:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d7e:	4622      	mov	r2, r4
 8000d80:	4621      	mov	r1, r4
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d82:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d84:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d86:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d88:	f000 f986 	bl	8001098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d8c:	201f      	movs	r0, #31
 8000d8e:	f000 f9c1 	bl	8001114 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d92:	4622      	mov	r2, r4
 8000d94:	4621      	mov	r1, r4
 8000d96:	2020      	movs	r0, #32
 8000d98:	f000 f97e 	bl	8001098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d9c:	2020      	movs	r0, #32
 8000d9e:	f000 f9b9 	bl	8001114 <HAL_NVIC_EnableIRQ>
}
 8000da2:	b009      	add	sp, #36	; 0x24
 8000da4:	bd30      	pop	{r4, r5, pc}
 8000da6:	bf00      	nop
 8000da8:	40005400 	.word	0x40005400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020400 	.word	0x40020400

08000db4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_TIM_Base_MspInit+0x3c>)
 8000db6:	6802      	ldr	r2, [r0, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d000      	beq.n	8000dbe <HAL_TIM_Base_MspInit+0xa>
 8000dbc:	4770      	bx	lr
{
 8000dbe:	b500      	push	{lr}
 8000dc0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8000dc8:	9201      	str	r2, [sp, #4]
 8000dca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000dcc:	f041 0102 	orr.w	r1, r1, #2
 8000dd0:	6419      	str	r1, [r3, #64]	; 0x40
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	9301      	str	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000dda:	201d      	movs	r0, #29
 8000ddc:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dde:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000de0:	f000 f95a 	bl	8001098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000de4:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000de6:	b003      	add	sp, #12
 8000de8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dec:	f000 b992 	b.w	8001114 <HAL_NVIC_EnableIRQ>
 8000df0:	40000400 	.word	0x40000400

08000df4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8000df6:	6803      	ldr	r3, [r0, #0]
 8000df8:	4a2d      	ldr	r2, [pc, #180]	; (8000eb0 <HAL_UART_MspInit+0xbc>)
{
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8000dfe:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000e04:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8000e08:	9409      	str	r4, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8000e0a:	d004      	beq.n	8000e16 <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000e0c:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <HAL_UART_MspInit+0xc0>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d02c      	beq.n	8000e6c <HAL_UART_MspInit+0x78>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e12:	b00b      	add	sp, #44	; 0x2c
 8000e14:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_UART_MspInit+0xc4>)
 8000e18:	9401      	str	r4, [sp, #4]
 8000e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	4827      	ldr	r0, [pc, #156]	; (8000ebc <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e1e:	f042 0210 	orr.w	r2, r2, #16
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
 8000e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e26:	f002 0210 	and.w	r2, r2, #16
 8000e2a:	9201      	str	r2, [sp, #4]
 8000e2c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	9402      	str	r4, [sp, #8]
 8000e30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e32:	f042 0202 	orr.w	r2, r2, #2
 8000e36:	631a      	str	r2, [r3, #48]	; 0x30
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e40:	22c0      	movs	r2, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f000 f9e4 	bl	8001220 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e58:	4622      	mov	r2, r4
 8000e5a:	4621      	mov	r1, r4
 8000e5c:	2025      	movs	r0, #37	; 0x25
 8000e5e:	f000 f91b 	bl	8001098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e62:	2025      	movs	r0, #37	; 0x25
 8000e64:	f000 f956 	bl	8001114 <HAL_NVIC_EnableIRQ>
}
 8000e68:	b00b      	add	sp, #44	; 0x2c
 8000e6a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_UART_MspInit+0xc4>)
 8000e6e:	9403      	str	r4, [sp, #12]
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
 8000e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000e7e:	9203      	str	r2, [sp, #12]
 8000e80:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	9404      	str	r4, [sp, #16]
 8000e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e86:	f042 0201 	orr.w	r2, r2, #1
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e8e:	200c      	movs	r0, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e96:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e98:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <HAL_UART_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e9e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2402      	movs	r4, #2
 8000ea4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea6:	f000 f9bb 	bl	8001220 <HAL_GPIO_Init>
}
 8000eaa:	b00b      	add	sp, #44	; 0x2c
 8000eac:	bd30      	pop	{r4, r5, pc}
 8000eae:	bf00      	nop
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40004400 	.word	0x40004400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler>
 8000ec6:	bf00      	nop

08000ec8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <HardFault_Handler>
 8000eca:	bf00      	nop

08000ecc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler>
 8000ece:	bf00      	nop

08000ed0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <BusFault_Handler>
 8000ed2:	bf00      	nop

08000ed4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler>
 8000ed6:	bf00      	nop

08000ed8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <DebugMon_Handler>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <PendSV_Handler>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 b8b4 	b.w	8001050 <HAL_IncTick>

08000ee8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ee8:	4801      	ldr	r0, [pc, #4]	; (8000ef0 <TIM3_IRQHandler+0x8>)
 8000eea:	f001 bedd 	b.w	8002ca8 <HAL_TIM_IRQHandler>
 8000eee:	bf00      	nop
 8000ef0:	20000168 	.word	0x20000168

08000ef4 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ef4:	4801      	ldr	r0, [pc, #4]	; (8000efc <I2C1_EV_IRQHandler+0x8>)
 8000ef6:	f000 bd89 	b.w	8001a0c <HAL_I2C_EV_IRQHandler>
 8000efa:	bf00      	nop
 8000efc:	20000114 	.word	0x20000114

08000f00 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f00:	4801      	ldr	r0, [pc, #4]	; (8000f08 <I2C1_ER_IRQHandler+0x8>)
 8000f02:	f001 ba2f 	b.w	8002364 <HAL_I2C_ER_IRQHandler>
 8000f06:	bf00      	nop
 8000f08:	20000114 	.word	0x20000114

08000f0c <SPI2_IRQHandler>:
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000f0c:	4808      	ldr	r0, [pc, #32]	; (8000f30 <SPI2_IRQHandler+0x24>)
 8000f0e:	6883      	ldr	r3, [r0, #8]
  */
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */
  /* Check RXNE flag value in ISR register */
  if (LL_SPI_IsActiveFlag_RXNE(SPI2))
 8000f10:	07d9      	lsls	r1, r3, #31
 8000f12:	d409      	bmi.n	8000f28 <SPI2_IRQHandler+0x1c>
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f14:	6883      	ldr	r3, [r0, #8]
 8000f16:	079a      	lsls	r2, r3, #30
 8000f18:	d501      	bpl.n	8000f1e <SPI2_IRQHandler+0x12>
  }
  /* Check RXNE flag value in ISR register */
  else if (LL_SPI_IsActiveFlag_TXE(SPI2))
  {
    /* Call function Slave Reception Callback */
    spi2_tx_cb(SPI2);
 8000f1a:	f7ff be87 	b.w	8000c2c <spi2_tx_cb>
  return ((READ_BIT(SPIx->SR, SPI_SR_OVR) == (SPI_SR_OVR)) ? 1UL : 0UL);
 8000f1e:	6883      	ldr	r3, [r0, #8]
 8000f20:	065b      	lsls	r3, r3, #25
 8000f22:	d503      	bpl.n	8000f2c <SPI2_IRQHandler+0x20>
  }
  /* Check STOP flag value in ISR register */
  else if (LL_SPI_IsActiveFlag_OVR(SPI2))
  {
    /* Call Error function */
    spi2_transfererror_cb(SPI2);
 8000f24:	f7ff beb0 	b.w	8000c88 <spi2_transfererror_cb>
    spi2_rx_cb(SPI2);
 8000f28:	f7ff be4a 	b.w	8000bc0 <spi2_rx_cb>
  }
  /* USER CODE END SPI2_IRQn 0 */
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40003800 	.word	0x40003800

08000f34 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f34:	4801      	ldr	r0, [pc, #4]	; (8000f3c <USART1_IRQHandler+0x8>)
 8000f36:	f002 b967 	b.w	8003208 <HAL_UART_IRQHandler>
 8000f3a:	bf00      	nop
 8000f3c:	200001b0 	.word	0x200001b0

08000f40 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <SystemInit+0x10>)
 8000f42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <HAL_UART_RxCpltCallback>:
        HAL_UART_Receive_IT(uart_settings.huart, rx_buffer, num_bytes_to_receive);
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f54:	b510      	push	{r4, lr}
    uart_process_received_data(&uart_settings, &uart_fsm_state);
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_UART_RxCpltCallback+0x1c>)
 8000f58:	4906      	ldr	r1, [pc, #24]	; (8000f74 <HAL_UART_RxCpltCallback+0x20>)
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <HAL_UART_RxCpltCallback+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4798      	blx	r3
    uart_update_state(&uart_settings, &uart_fsm_state);
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_UART_RxCpltCallback+0x28>)
 8000f62:	4904      	ldr	r1, [pc, #16]	; (8000f74 <HAL_UART_RxCpltCallback+0x20>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <HAL_UART_RxCpltCallback+0x24>)
}
 8000f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    uart_update_state(&uart_settings, &uart_fsm_state);
 8000f6c:	4718      	bx	r3
 8000f6e:	bf00      	nop
 8000f70:	20000498 	.word	0x20000498
 8000f74:	20000494 	.word	0x20000494
 8000f78:	2000049c 	.word	0x2000049c
 8000f7c:	200004c0 	.word	0x200004c0

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f88:	4a0e      	ldr	r2, [pc, #56]	; (8000fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f9c:	4c0b      	ldr	r4, [pc, #44]	; (8000fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000faa:	f7ff ffc9 	bl	8000f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f002 fb6d 	bl	800368c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fb7b 	bl	80006ac <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fc4:	08003750 	.word	0x08003750
  ldr r2, =_sbss
 8000fc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fcc:	200004c8 	.word	0x200004c8

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_InitTick+0x3c>)
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_InitTick+0x40>)
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
{
 8000fde:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	fbb0 f0f2 	udiv	r0, r0, r2
 8000fe8:	fbb3 f0f0 	udiv	r0, r3, r0
 8000fec:	f000 f8a0 	bl	8001130 <HAL_SYSTICK_Config>
 8000ff0:	b908      	cbnz	r0, 8000ff6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff2:	2d0f      	cmp	r5, #15
 8000ff4:	d901      	bls.n	8000ffa <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ff8:	bd38      	pop	{r3, r4, r5, pc}
 8000ffa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	4629      	mov	r1, r5
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f848 	bl	8001098 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_InitTick+0x44>)
 800100a:	4620      	mov	r0, r4
 800100c:	601d      	str	r5, [r3, #0]
}
 800100e:	bd38      	pop	{r3, r4, r5, pc}
 8001010:	20000004 	.word	0x20000004
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_Init>:
{
 800101c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x30>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001026:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800102e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001036:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f81b 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff ffc8 	bl	8000fd4 <HAL_InitTick>
  HAL_MspInit();
 8001044:	f7ff fe4e 	bl	8000ce4 <HAL_MspInit>
}
 8001048:	2000      	movs	r0, #0
 800104a:	bd08      	pop	{r3, pc}
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001050:	4a03      	ldr	r2, [pc, #12]	; (8001060 <HAL_IncTick+0x10>)
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <HAL_IncTick+0x14>)
 8001054:	6811      	ldr	r1, [r2, #0]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	440b      	add	r3, r1
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200004c4 	.word	0x200004c4
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001068:	4b01      	ldr	r3, [pc, #4]	; (8001070 <HAL_GetTick+0x8>)
 800106a:	6818      	ldr	r0, [r3, #0]
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200004c4 	.word	0x200004c4

08001074 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001074:	4907      	ldr	r1, [pc, #28]	; (8001094 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001076:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001086:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800108e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_NVIC_SetPriority+0x74>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a2:	f1c3 0e07 	rsb	lr, r3, #7
 80010a6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010aa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ae:	bf28      	it	cs
 80010b0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b4:	f1bc 0f06 	cmp.w	ip, #6
 80010b8:	d91b      	bls.n	80010f2 <HAL_NVIC_SetPriority+0x5a>
 80010ba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 3cff 	mov.w	ip, #4294967295
 80010c0:	fa0c fc03 	lsl.w	ip, ip, r3
 80010c4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 3cff 	mov.w	ip, #4294967295
 80010cc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80010d0:	ea21 010c 	bic.w	r1, r1, ip
 80010d4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80010d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80010dc:	db0c      	blt.n	80010f8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010e2:	0109      	lsls	r1, r1, #4
 80010e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80010e8:	b2c9      	uxtb	r1, r1
 80010ea:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f4:	4613      	mov	r3, r2
 80010f6:	e7e7      	b.n	80010c8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_NVIC_SetPriority+0x78>)
 80010fa:	f000 000f 	and.w	r0, r0, #15
 80010fe:	0109      	lsls	r1, r1, #4
 8001100:	4403      	add	r3, r0
 8001102:	b2c9      	uxtb	r1, r1
 8001104:	7619      	strb	r1, [r3, #24]
 8001106:	f85d fb04 	ldr.w	pc, [sp], #4
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	e000ecfc 	.word	0xe000ecfc

08001114 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001114:	2800      	cmp	r0, #0
 8001116:	db08      	blt.n	800112a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001118:	0941      	lsrs	r1, r0, #5
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_NVIC_EnableIRQ+0x18>)
 800111c:	f000 001f 	and.w	r0, r0, #31
 8001120:	2301      	movs	r3, #1
 8001122:	fa03 f000 	lsl.w	r0, r3, r0
 8001126:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100

08001130 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	3801      	subs	r0, #1
 8001132:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001136:	d210      	bcs.n	800115a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001138:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	4c08      	ldr	r4, [pc, #32]	; (8001160 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001140:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001146:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001152:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	6119      	str	r1, [r3, #16]
 8001158:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2001      	movs	r0, #1
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001168:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800116a:	f7ff ff7d 	bl	8001068 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8001172:	2b02      	cmp	r3, #2
 8001174:	d006      	beq.n	8001184 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001176:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001178:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800117a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117e:	6562      	str	r2, [r4, #84]	; 0x54
    
    return HAL_ERROR;
 8001180:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8001182:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f022 0216 	bic.w	r2, r2, #22
 800118c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001194:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001196:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001198:	4605      	mov	r5, r0
 800119a:	b332      	cbz	r2, 80011ea <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	f022 0208 	bic.w	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e005      	b.n	80011ba <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff ff5b 	bl	8001068 <HAL_GetTick>
 80011b2:	1b43      	subs	r3, r0, r5
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d80f      	bhi.n	80011d8 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f013 0301 	ands.w	r3, r3, #1
 80011c0:	d1f5      	bne.n	80011ae <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80011c4:	223f      	movs	r2, #63	; 0x3f
 80011c6:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80011c8:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ca:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80011cc:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80011d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80011d4:	4618      	mov	r0, r3
}
 80011d6:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d8:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011da:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 80011dc:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011de:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80011e0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80011e8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80011ec:	2a00      	cmp	r2, #0
 80011ee:	d1d5      	bne.n	800119c <HAL_DMA_Abort+0x38>
 80011f0:	e7d8      	b.n	80011a4 <HAL_DMA_Abort+0x40>
 80011f2:	bf00      	nop

080011f4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d003      	beq.n	8001204 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001200:	2001      	movs	r0, #1
 8001202:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001204:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001206:	2305      	movs	r3, #5
 8001208:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8001212:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001214:	6013      	str	r3, [r2, #0]
}
 8001216:	4770      	bx	lr

08001218 <HAL_DMA_GetState>:
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  return hdma->State;
 8001218:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001224:	2200      	movs	r2, #0
 8001226:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001228:	4e70      	ldr	r6, [pc, #448]	; (80013ec <HAL_GPIO_Init+0x1cc>)
{
 800122a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 800122e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4689      	mov	r9, r1
 8001234:	e004      	b.n	8001240 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	3301      	adds	r3, #1
 8001238:	2b10      	cmp	r3, #16
 800123a:	f102 0202 	add.w	r2, r2, #2
 800123e:	d078      	beq.n	8001332 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8001240:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001244:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001248:	43a1      	bics	r1, r4
 800124a:	d1f4      	bne.n	8001236 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001250:	f00c 0103 	and.w	r1, ip, #3
 8001254:	1e4d      	subs	r5, r1, #1
 8001256:	2d01      	cmp	r5, #1
 8001258:	d96e      	bls.n	8001338 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125a:	2903      	cmp	r1, #3
 800125c:	f040 80ae 	bne.w	80013bc <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	4091      	lsls	r1, r2
 8001262:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8001264:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001266:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800126e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001270:	d0e1      	beq.n	8001236 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4d5f      	ldr	r5, [pc, #380]	; (80013f0 <HAL_GPIO_Init+0x1d0>)
 8001274:	2100      	movs	r1, #0
 8001276:	9103      	str	r1, [sp, #12]
 8001278:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800127a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800127e:	6469      	str	r1, [r5, #68]	; 0x44
 8001280:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001282:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001286:	9103      	str	r1, [sp, #12]
 8001288:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800128a:	f023 0103 	bic.w	r1, r3, #3
 800128e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001292:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001296:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800129e:	00bf      	lsls	r7, r7, #2
 80012a0:	250f      	movs	r5, #15
 80012a2:	40bd      	lsls	r5, r7
 80012a4:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012a8:	4d52      	ldr	r5, [pc, #328]	; (80013f4 <HAL_GPIO_Init+0x1d4>)
 80012aa:	42a8      	cmp	r0, r5
 80012ac:	d017      	beq.n	80012de <HAL_GPIO_Init+0xbe>
 80012ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80012b2:	42a8      	cmp	r0, r5
 80012b4:	f000 8086 	beq.w	80013c4 <HAL_GPIO_Init+0x1a4>
 80012b8:	4d4f      	ldr	r5, [pc, #316]	; (80013f8 <HAL_GPIO_Init+0x1d8>)
 80012ba:	42a8      	cmp	r0, r5
 80012bc:	f000 8087 	beq.w	80013ce <HAL_GPIO_Init+0x1ae>
 80012c0:	4d4e      	ldr	r5, [pc, #312]	; (80013fc <HAL_GPIO_Init+0x1dc>)
 80012c2:	42a8      	cmp	r0, r5
 80012c4:	f000 808a 	beq.w	80013dc <HAL_GPIO_Init+0x1bc>
 80012c8:	4d4d      	ldr	r5, [pc, #308]	; (8001400 <HAL_GPIO_Init+0x1e0>)
 80012ca:	42a8      	cmp	r0, r5
 80012cc:	bf0c      	ite	eq
 80012ce:	f04f 0e04 	moveq.w	lr, #4
 80012d2:	f04f 0e07 	movne.w	lr, #7
 80012d6:	fa0e f707 	lsl.w	r7, lr, r7
 80012da:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012de:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80012e2:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012e8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012ec:	bf0c      	ite	eq
 80012ee:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80012f0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80012f4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80012f6:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012f8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80012fc:	bf0c      	ite	eq
 80012fe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001300:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001304:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001306:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001308:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800130c:	bf0c      	ite	eq
 800130e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001310:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001314:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001316:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001318:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001320:	bf0c      	ite	eq
 8001322:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001324:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001328:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800132a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132c:	f102 0202 	add.w	r2, r2, #2
 8001330:	d186      	bne.n	8001240 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001332:	b005      	add	sp, #20
 8001334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001338:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800133c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001342:	2503      	movs	r5, #3
 8001344:	fa05 fe02 	lsl.w	lr, r5, r2
 8001348:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8001350:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001352:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001354:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001358:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001360:	409f      	lsls	r7, r3
 8001362:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001366:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001368:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001372:	4097      	lsls	r7, r2
 8001374:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800137a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	fa01 f102 	lsl.w	r1, r1, r2
 8001380:	f47f af70 	bne.w	8001264 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8001384:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001388:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001390:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001394:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001396:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800139e:	fa07 f708 	lsl.w	r7, r7, r8
 80013a2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a4:	270f      	movs	r7, #15
 80013a6:	fa07 f808 	lsl.w	r8, r7, r8
 80013aa:	9f00      	ldr	r7, [sp, #0]
 80013ac:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b0:	9f01      	ldr	r7, [sp, #4]
 80013b2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80013b6:	f8ce 7020 	str.w	r7, [lr, #32]
 80013ba:	e753      	b.n	8001264 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	2503      	movs	r5, #3
 80013be:	4095      	lsls	r5, r2
 80013c0:	43ed      	mvns	r5, r5
 80013c2:	e7d1      	b.n	8001368 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c4:	fa0a f707 	lsl.w	r7, sl, r7
 80013c8:	ea48 0807 	orr.w	r8, r8, r7
 80013cc:	e787      	b.n	80012de <HAL_GPIO_Init+0xbe>
 80013ce:	f04f 0e02 	mov.w	lr, #2
 80013d2:	fa0e f707 	lsl.w	r7, lr, r7
 80013d6:	ea48 0807 	orr.w	r8, r8, r7
 80013da:	e780      	b.n	80012de <HAL_GPIO_Init+0xbe>
 80013dc:	f04f 0e03 	mov.w	lr, #3
 80013e0:	fa0e f707 	lsl.w	r7, lr, r7
 80013e4:	ea48 0807 	orr.w	r8, r8, r7
 80013e8:	e779      	b.n	80012de <HAL_GPIO_Init+0xbe>
 80013ea:	bf00      	nop
 80013ec:	40013c00 	.word	0x40013c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020800 	.word	0x40020800
 80013fc:	40020c00 	.word	0x40020c00
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001404:	b902      	cbnz	r2, 8001408 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001406:	0409      	lsls	r1, r1, #16
 8001408:	6181      	str	r1, [r0, #24]
  }
}
 800140a:	4770      	bx	lr

0800140c <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800140c:	2800      	cmp	r0, #0
 800140e:	f000 80b9 	beq.w	8001584 <HAL_I2C_Init+0x178>
{
 8001412:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001414:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001418:	4604      	mov	r4, r0
 800141a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8098 	beq.w	8001554 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001424:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001426:	2224      	movs	r2, #36	; 0x24
 8001428:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001444:	f001 fb0c 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001448:	6863      	ldr	r3, [r4, #4]
 800144a:	494f      	ldr	r1, [pc, #316]	; (8001588 <HAL_I2C_Init+0x17c>)
 800144c:	428b      	cmp	r3, r1
 800144e:	d84f      	bhi.n	80014f0 <HAL_I2C_Init+0xe4>
 8001450:	4a4e      	ldr	r2, [pc, #312]	; (800158c <HAL_I2C_Init+0x180>)
 8001452:	4290      	cmp	r0, r2
 8001454:	d97c      	bls.n	8001550 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001456:	4d4e      	ldr	r5, [pc, #312]	; (8001590 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001458:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800145a:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800145e:	1e43      	subs	r3, r0, #1
 8001460:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001464:	6822      	ldr	r2, [r4, #0]
 8001466:	6850      	ldr	r0, [r2, #4]
 8001468:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 800146c:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8001470:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8001472:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001474:	f101 0c01 	add.w	ip, r1, #1
 8001478:	6a11      	ldr	r1, [r2, #32]
 800147a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800147e:	ea41 010c 	orr.w	r1, r1, ip
 8001482:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001484:	69d1      	ldr	r1, [r2, #28]
 8001486:	f640 7efc 	movw	lr, #4092	; 0xffc
 800148a:	3301      	adds	r3, #1
 800148c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001490:	ea13 0f0e 	tst.w	r3, lr
 8001494:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001498:	d161      	bne.n	800155e <HAL_I2C_Init+0x152>
 800149a:	2304      	movs	r3, #4
 800149c:	430b      	orrs	r3, r1
 800149e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014a0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80014a4:	6811      	ldr	r1, [r2, #0]
 80014a6:	4303      	orrs	r3, r0
 80014a8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80014ac:	430b      	orrs	r3, r1
 80014ae:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014b0:	6891      	ldr	r1, [r2, #8]
 80014b2:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80014b6:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80014ba:	4303      	orrs	r3, r0
 80014bc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014c0:	430b      	orrs	r3, r1
 80014c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014c4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80014c8:	68d1      	ldr	r1, [r2, #12]
 80014ca:	4303      	orrs	r3, r0
 80014cc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80014d0:	430b      	orrs	r3, r1
 80014d2:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d4:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d6:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80014d8:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80014dc:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80014de:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e0:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014e2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014e6:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e

  return HAL_OK;
 80014ec:	4618      	mov	r0, r3
}
 80014ee:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014f0:	4a28      	ldr	r2, [pc, #160]	; (8001594 <HAL_I2C_Init+0x188>)
 80014f2:	4290      	cmp	r0, r2
 80014f4:	d92c      	bls.n	8001550 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80014f6:	4d26      	ldr	r5, [pc, #152]	; (8001590 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f8:	4e27      	ldr	r6, [pc, #156]	; (8001598 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80014fa:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014fe:	6822      	ldr	r2, [r4, #0]
 8001500:	6855      	ldr	r5, [r2, #4]
 8001502:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001506:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 800150a:	6055      	str	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800150c:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001510:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8001514:	fb05 f101 	mul.w	r1, r5, r1
 8001518:	fba6 5101 	umull	r5, r1, r6, r1
 800151c:	6a15      	ldr	r5, [r2, #32]
 800151e:	0989      	lsrs	r1, r1, #6
 8001520:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8001524:	3101      	adds	r1, #1
 8001526:	4329      	orrs	r1, r5
 8001528:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800152a:	69d1      	ldr	r1, [r2, #28]
 800152c:	68a5      	ldr	r5, [r4, #8]
 800152e:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8001532:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8001536:	b9ad      	cbnz	r5, 8001564 <HAL_I2C_Init+0x158>
 8001538:	3801      	subs	r0, #1
 800153a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800153e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	b1d3      	cbz	r3, 8001580 <HAL_I2C_Init+0x174>
 800154a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154e:	e7a5      	b.n	800149c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001550:	2001      	movs	r0, #1
}
 8001552:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001554:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8001558:	f7ff fbe2 	bl	8000d20 <HAL_I2C_MspInit>
 800155c:	e762      	b.n	8001424 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800155e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001562:	e79b      	b.n	800149c <HAL_I2C_Init+0x90>
 8001564:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001568:	3801      	subs	r0, #1
 800156a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	b113      	cbz	r3, 8001580 <HAL_I2C_Init+0x174>
 800157a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157e:	e78d      	b.n	800149c <HAL_I2C_Init+0x90>
 8001580:	2301      	movs	r3, #1
 8001582:	e78b      	b.n	800149c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8001584:	2001      	movs	r0, #1
}
 8001586:	4770      	bx	lr
 8001588:	000186a0 	.word	0x000186a0
 800158c:	001e847f 	.word	0x001e847f
 8001590:	431bde83 	.word	0x431bde83
 8001594:	003d08ff 	.word	0x003d08ff
 8001598:	10624dd3 	.word	0x10624dd3

0800159c <HAL_I2C_Slave_Seq_Transmit_IT>:
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800159c:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
 80015a0:	f00c 0c28 	and.w	ip, ip, #40	; 0x28
 80015a4:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 80015a8:	d130      	bne.n	800160c <HAL_I2C_Slave_Seq_Transmit_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 80015aa:	2900      	cmp	r1, #0
 80015ac:	d02c      	beq.n	8001608 <HAL_I2C_Slave_Seq_Transmit_IT+0x6c>
 80015ae:	2a00      	cmp	r2, #0
 80015b0:	d02a      	beq.n	8001608 <HAL_I2C_Slave_Seq_Transmit_IT+0x6c>
{
 80015b2:	b430      	push	{r4, r5}
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015b4:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80015b8:	2c01      	cmp	r4, #1
{
 80015ba:	b082      	sub	sp, #8
    __HAL_LOCK(hi2c);
 80015bc:	d02d      	beq.n	800161a <HAL_I2C_Slave_Seq_Transmit_IT+0x7e>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015be:	6804      	ldr	r4, [r0, #0]
 80015c0:	6825      	ldr	r5, [r4, #0]
 80015c2:	07ed      	lsls	r5, r5, #31
 80015c4:	d524      	bpl.n	8001610 <HAL_I2C_Slave_Seq_Transmit_IT+0x74>
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015c6:	6825      	ldr	r5, [r4, #0]
 80015c8:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 80015cc:	6025      	str	r5, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80015ce:	2529      	movs	r5, #41	; 0x29
 80015d0:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015d4:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80015d6:	2520      	movs	r5, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d8:	2100      	movs	r1, #0
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80015da:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015de:	6401      	str	r1, [r0, #64]	; 0x40
    hi2c->XferCount   = Size;
 80015e0:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015e2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 80015e4:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e6:	9101      	str	r1, [sp, #4]
 80015e8:	6963      	ldr	r3, [r4, #20]
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	69a3      	ldr	r3, [r4, #24]
 80015ee:	9301      	str	r3, [sp, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015f0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f4:	9b01      	ldr	r3, [sp, #4]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015f6:	6863      	ldr	r3, [r4, #4]
    hi2c->XferSize    = hi2c->XferCount;
 80015f8:	8502      	strh	r2, [r0, #40]	; 0x28
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80015fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015fe:	6063      	str	r3, [r4, #4]

    return HAL_OK;
 8001600:	4608      	mov	r0, r1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001602:	b002      	add	sp, #8
 8001604:	bc30      	pop	{r4, r5}
 8001606:	4770      	bx	lr
      return  HAL_ERROR;
 8001608:	2001      	movs	r0, #1
}
 800160a:	4770      	bx	lr
    return HAL_BUSY;
 800160c:	2002      	movs	r0, #2
 800160e:	4770      	bx	lr
      __HAL_I2C_ENABLE(hi2c);
 8001610:	6825      	ldr	r5, [r4, #0]
 8001612:	f045 0501 	orr.w	r5, r5, #1
 8001616:	6025      	str	r5, [r4, #0]
 8001618:	e7d5      	b.n	80015c6 <HAL_I2C_Slave_Seq_Transmit_IT+0x2a>
    return HAL_BUSY;
 800161a:	2002      	movs	r0, #2
 800161c:	e7f1      	b.n	8001602 <HAL_I2C_Slave_Seq_Transmit_IT+0x66>
 800161e:	bf00      	nop

08001620 <HAL_I2C_Slave_Seq_Receive_IT>:
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001620:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
 8001624:	f00c 0c28 	and.w	ip, ip, #40	; 0x28
 8001628:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 800162c:	d130      	bne.n	8001690 <HAL_I2C_Slave_Seq_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800162e:	2900      	cmp	r1, #0
 8001630:	d02c      	beq.n	800168c <HAL_I2C_Slave_Seq_Receive_IT+0x6c>
 8001632:	2a00      	cmp	r2, #0
 8001634:	d02a      	beq.n	800168c <HAL_I2C_Slave_Seq_Receive_IT+0x6c>
{
 8001636:	b430      	push	{r4, r5}
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001638:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 800163c:	2c01      	cmp	r4, #1
{
 800163e:	b082      	sub	sp, #8
    __HAL_LOCK(hi2c);
 8001640:	d02d      	beq.n	800169e <HAL_I2C_Slave_Seq_Receive_IT+0x7e>

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001642:	6804      	ldr	r4, [r0, #0]
 8001644:	6825      	ldr	r5, [r4, #0]
 8001646:	07ed      	lsls	r5, r5, #31
 8001648:	d524      	bpl.n	8001694 <HAL_I2C_Slave_Seq_Receive_IT+0x74>
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800164a:	6825      	ldr	r5, [r4, #0]
 800164c:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
 8001650:	6025      	str	r5, [r4, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001652:	252a      	movs	r5, #42	; 0x2a
 8001654:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001658:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800165a:	2520      	movs	r5, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165c:	2100      	movs	r1, #0
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800165e:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001662:	6401      	str	r1, [r0, #64]	; 0x40
    hi2c->XferCount   = Size;
 8001664:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001666:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    hi2c->XferOptions = XferOptions;
 8001668:	62c3      	str	r3, [r0, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800166a:	9101      	str	r1, [sp, #4]
 800166c:	6963      	ldr	r3, [r4, #20]
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	69a3      	ldr	r3, [r4, #24]
 8001672:	9301      	str	r3, [sp, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001678:	9b01      	ldr	r3, [sp, #4]
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800167a:	6863      	ldr	r3, [r4, #4]
    hi2c->XferSize    = hi2c->XferCount;
 800167c:	8502      	strh	r2, [r0, #40]	; 0x28
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800167e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001682:	6063      	str	r3, [r4, #4]

    return HAL_OK;
 8001684:	4608      	mov	r0, r1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001686:	b002      	add	sp, #8
 8001688:	bc30      	pop	{r4, r5}
 800168a:	4770      	bx	lr
      return  HAL_ERROR;
 800168c:	2001      	movs	r0, #1
}
 800168e:	4770      	bx	lr
    return HAL_BUSY;
 8001690:	2002      	movs	r0, #2
 8001692:	4770      	bx	lr
      __HAL_I2C_ENABLE(hi2c);
 8001694:	6825      	ldr	r5, [r4, #0]
 8001696:	f045 0501 	orr.w	r5, r5, #1
 800169a:	6025      	str	r5, [r4, #0]
 800169c:	e7d5      	b.n	800164a <HAL_I2C_Slave_Seq_Receive_IT+0x2a>
    return HAL_BUSY;
 800169e:	2002      	movs	r0, #2
 80016a0:	e7f1      	b.n	8001686 <HAL_I2C_Slave_Seq_Receive_IT+0x66>
 80016a2:	bf00      	nop

080016a4 <HAL_I2C_EnableListen_IT>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80016a8:	2b20      	cmp	r3, #32
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_EnableListen_IT+0xc>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80016ac:	2002      	movs	r0, #2
  }
}
 80016ae:	4770      	bx	lr
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80016b0:	2228      	movs	r2, #40	; 0x28
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b2:	6803      	ldr	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80016b4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	07d2      	lsls	r2, r2, #31
 80016bc:	d403      	bmi.n	80016c6 <HAL_I2C_EnableListen_IT+0x22>
      __HAL_I2C_ENABLE(hi2c);
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f042 0201 	orr.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016cc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
    return HAL_OK;
 80016d4:	2000      	movs	r0, #0
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016d6:	605a      	str	r2, [r3, #4]
    return HAL_OK;
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop

080016dc <HAL_I2C_MasterTxCpltCallback>:
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <HAL_I2C_MasterRxCpltCallback>:
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop

080016e4 <HAL_I2C_MemTxCpltCallback>:
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop

080016e8 <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80016e8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d

  if (hi2c->EventCount == 0U)
 80016ec:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80016ee:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 80016f0:	b959      	cbnz	r1, 800170a <I2C_MemoryTransmit_TXE_BTF+0x22>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80016f2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80016f4:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80016f6:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80016f8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80016fa:	d00d      	beq.n	8001718 <I2C_MemoryTransmit_TXE_BTF+0x30>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80016fc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001700:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8001702:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001704:	3201      	adds	r2, #1
 8001706:	6502      	str	r2, [r0, #80]	; 0x50
 8001708:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 800170a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800170c:	2901      	cmp	r1, #1
 800170e:	d009      	beq.n	8001724 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8001710:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8001712:	2902      	cmp	r1, #2
 8001714:	d00e      	beq.n	8001734 <I2C_MemoryTransmit_TXE_BTF+0x4c>
 8001716:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 800171c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800171e:	3202      	adds	r2, #2
 8001720:	6502      	str	r2, [r0, #80]	; 0x50
 8001722:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001724:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001726:	6801      	ldr	r1, [r0, #0]
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 800172c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800172e:	3201      	adds	r2, #1
 8001730:	6502      	str	r2, [r0, #80]	; 0x50
 8001732:	4770      	bx	lr
 8001734:	b2d2      	uxtb	r2, r2
  {
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001736:	2a22      	cmp	r2, #34	; 0x22
 8001738:	d01f      	beq.n	800177a <I2C_MemoryTransmit_TXE_BTF+0x92>
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;

      hi2c->EventCount++;
    }
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800173a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800173c:	b289      	uxth	r1, r1
 800173e:	b9c1      	cbnz	r1, 8001772 <I2C_MemoryTransmit_TXE_BTF+0x8a>
      hi2c->pBuffPtr++;

      /* Update counter */
      hi2c->XferCount--;
    }
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001740:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001742:	b289      	uxth	r1, r1
 8001744:	2900      	cmp	r1, #0
 8001746:	d1e6      	bne.n	8001716 <I2C_MemoryTransmit_TXE_BTF+0x2e>
 8001748:	2a21      	cmp	r2, #33	; 0x21
 800174a:	d1e4      	bne.n	8001716 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    {
      /* Generate Stop condition then Call TxCpltCallback() */
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800174c:	6802      	ldr	r2, [r0, #0]
{
 800174e:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001750:	6854      	ldr	r4, [r2, #4]
 8001752:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8001756:	6054      	str	r4, [r2, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001758:	6814      	ldr	r4, [r2, #0]
 800175a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 800175e:	6014      	str	r4, [r2, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 8001760:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001762:	6301      	str	r1, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001764:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001768:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MemTxCpltCallback(hi2c);
#else
      HAL_I2C_MemTxCpltCallback(hi2c);
 800176c:	f7ff ffba 	bl	80016e4 <HAL_I2C_MemTxCpltCallback>
  }
  else
  {
    /* Do nothing */
  }
}
 8001770:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001772:	2a21      	cmp	r2, #33	; 0x21
 8001774:	d00a      	beq.n	800178c <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800177a:	6801      	ldr	r1, [r0, #0]
 800177c:	680a      	ldr	r2, [r1, #0]
 800177e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001782:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8001784:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001786:	3201      	adds	r2, #1
 8001788:	6502      	str	r2, [r0, #80]	; 0x50
 800178a:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800178c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	f811 0b01 	ldrb.w	r0, [r1], #1
 8001794:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8001796:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001798:	6259      	str	r1, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800179a:	3a01      	subs	r2, #1
 800179c:	b292      	uxth	r2, r2
 800179e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop

080017a4 <HAL_I2C_MemRxCpltCallback>:
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <HAL_I2C_AbortCpltCallback>:
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop

080017ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017ae:	4b3a      	ldr	r3, [pc, #232]	; (8001898 <I2C_DMAAbort+0xec>)
 80017b0:	493a      	ldr	r1, [pc, #232]	; (800189c <I2C_DMAAbort+0xf0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80017b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80017b6:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017b8:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 80017ba:	2200      	movs	r2, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017bc:	fba1 1303 	umull	r1, r3, r1, r3
  __IO uint32_t count = 0U;
 80017c0:	9201      	str	r2, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017c2:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017c4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80017c8:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017d2:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	e005      	b.n	80017e4 <I2C_DMAAbort+0x38>
    count--;
 80017d8:	9b01      	ldr	r3, [sp, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	059b      	lsls	r3, r3, #22
 80017e2:	d506      	bpl.n	80017f2 <I2C_DMAAbort+0x46>
    if (count == 0U)
 80017e4:	9b01      	ldr	r3, [sp, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f6      	bne.n	80017d8 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017ec:	f043 0320 	orr.w	r3, r3, #32
 80017f0:	6403      	str	r3, [r0, #64]	; 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80017f2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80017f4:	b34c      	cbz	r4, 800184a <I2C_DMAAbort+0x9e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
 80017f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
    hi2c->hdmatx->XferCpltCallback = NULL;
 80017f8:	2500      	movs	r5, #0
 80017fa:	63e5      	str	r5, [r4, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 80017fc:	b1f3      	cbz	r3, 800183c <I2C_DMAAbort+0x90>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017fe:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001800:	63dd      	str	r5, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001802:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8001806:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8001808:	8545      	strh	r5, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800180a:	6525      	str	r5, [r4, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800180c:	2400      	movs	r4, #0
 800180e:	651c      	str	r4, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8001810:	6813      	ldr	r3, [r2, #0]
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001818:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800181c:	2b60      	cmp	r3, #96	; 0x60
 800181e:	d02a      	beq.n	8001876 <I2C_DMAAbort+0xca>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001820:	f001 0128 	and.w	r1, r1, #40	; 0x28
 8001824:	2928      	cmp	r1, #40	; 0x28
 8001826:	d019      	beq.n	800185c <I2C_DMAAbort+0xb0>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8001828:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800182a:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800182c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001830:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8001834:	f7fe fee6 	bl	8000604 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001838:	b002      	add	sp, #8
 800183a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183c:	6815      	ldr	r5, [r2, #0]
 800183e:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8001842:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8001844:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001846:	6523      	str	r3, [r4, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8001848:	e7e2      	b.n	8001810 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 800184a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800184c:	b1f3      	cbz	r3, 800188c <I2C_DMAAbort+0xe0>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800184e:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8001850:	63dc      	str	r4, [r3, #60]	; 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001852:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 8001856:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8001858:	8544      	strh	r4, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800185a:	e7d7      	b.n	800180c <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 800185c:	6813      	ldr	r3, [r2, #0]
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001864:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001866:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800186e:	6304      	str	r4, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001870:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8001874:	e7de      	b.n	8001834 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001876:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8001878:	2220      	movs	r2, #32
 800187a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800187e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8001882:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001884:	f7ff ff90 	bl	80017a8 <HAL_I2C_AbortCpltCallback>
}
 8001888:	b002      	add	sp, #8
 800188a:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188c:	6814      	ldr	r4, [r2, #0]
 800188e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001892:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8001894:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8001896:	e7bb      	b.n	8001810 <I2C_DMAAbort+0x64>
 8001898:	20000000 	.word	0x20000000
 800189c:	14f8b589 	.word	0x14f8b589

080018a0 <I2C_ITError>:
{
 80018a0:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018a2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80018a6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80018aa:	2b10      	cmp	r3, #16
{
 80018ac:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80018ae:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80018b0:	d039      	beq.n	8001926 <I2C_ITError+0x86>
 80018b2:	b2d9      	uxtb	r1, r3
 80018b4:	2940      	cmp	r1, #64	; 0x40
 80018b6:	d036      	beq.n	8001926 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80018b8:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80018bc:	2928      	cmp	r1, #40	; 0x28
 80018be:	d03d      	beq.n	800193c <I2C_ITError+0x9c>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80018c0:	6823      	ldr	r3, [r4, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80018c2:	6859      	ldr	r1, [r3, #4]
 80018c4:	0508      	lsls	r0, r1, #20
 80018c6:	d407      	bmi.n	80018d8 <I2C_ITError+0x38>
 80018c8:	2a60      	cmp	r2, #96	; 0x60
 80018ca:	d005      	beq.n	80018d8 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 80018cc:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018ce:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80018d0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80018d8:	2200      	movs	r2, #0
 80018da:	6322      	str	r2, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80018e2:	d134      	bne.n	800194e <I2C_ITError+0xae>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80018e4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80018e8:	2960      	cmp	r1, #96	; 0x60
 80018ea:	d075      	beq.n	80019d8 <I2C_ITError+0x138>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	0650      	lsls	r0, r2, #25
 80018f0:	d505      	bpl.n	80018fe <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80018f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018fa:	3301      	adds	r3, #1
 80018fc:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80018fe:	4620      	mov	r0, r4
 8001900:	f7fe fe80 	bl	8000604 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8001904:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8001906:	0719      	lsls	r1, r3, #28
 8001908:	d004      	beq.n	8001914 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800190a:	6822      	ldr	r2, [r4, #0]
 800190c:	6853      	ldr	r3, [r2, #4]
 800190e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001912:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8001914:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8001918:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800191a:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 800191c:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800191e:	d501      	bpl.n	8001924 <I2C_ITError+0x84>
 8001920:	2b28      	cmp	r3, #40	; 0x28
 8001922:	d02f      	beq.n	8001984 <I2C_ITError+0xe4>
}
 8001924:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001926:	2a22      	cmp	r2, #34	; 0x22
 8001928:	d1c6      	bne.n	80018b8 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001932:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	0512      	lsls	r2, r2, #20
 8001938:	d5c8      	bpl.n	80018cc <I2C_ITError+0x2c>
 800193a:	e7cd      	b.n	80018d8 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 800193c:	2300      	movs	r3, #0
 800193e:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001940:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001942:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800194c:	d0ca      	beq.n	80018e4 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800194e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001950:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001956:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001958:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800195c:	2b01      	cmp	r3, #1
 800195e:	d01e      	beq.n	800199e <I2C_ITError+0xfe>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001960:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <I2C_ITError+0x164>)
 8001962:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001964:	f7ff fc46 	bl	80011f4 <HAL_DMA_Abort_IT>
 8001968:	2800      	cmp	r0, #0
 800196a:	d0cb      	beq.n	8001904 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 800196c:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800196e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001970:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8001972:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8001974:	f023 0301 	bic.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800197a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800197e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001980:	4798      	blx	r3
 8001982:	e7bf      	b.n	8001904 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001984:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001986:	4920      	ldr	r1, [pc, #128]	; (8001a08 <I2C_ITError+0x168>)
 8001988:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 800198a:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800198c:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800198e:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8001990:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001994:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001998:	f7fe fde6 	bl	8000568 <HAL_I2C_ListenCpltCallback>
}
 800199c:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800199e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <I2C_ITError+0x164>)
 80019a2:	6503      	str	r3, [r0, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80019a4:	f7ff fc26 	bl	80011f4 <HAL_DMA_Abort_IT>
 80019a8:	2800      	cmp	r0, #0
 80019aa:	d0ab      	beq.n	8001904 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80019ac:	6823      	ldr	r3, [r4, #0]
 80019ae:	695a      	ldr	r2, [r3, #20]
 80019b0:	0651      	lsls	r1, r2, #25
 80019b2:	d506      	bpl.n	80019c2 <I2C_ITError+0x122>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 80019ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80019bc:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 80019be:	3201      	adds	r2, #1
 80019c0:	6262      	str	r2, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 80019c2:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80019c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80019c6:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80019cc:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80019ce:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80019d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80019d4:	4798      	blx	r3
 80019d6:	e795      	b.n	8001904 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 80019d8:	2120      	movs	r1, #32
 80019da:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019de:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	0652      	lsls	r2, r2, #25
 80019e4:	d506      	bpl.n	80019f4 <I2C_ITError+0x154>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80019ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80019ee:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 80019f0:	3201      	adds	r2, #1
 80019f2:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 80019fa:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 80019fc:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80019fe:	f7ff fed3 	bl	80017a8 <HAL_I2C_AbortCpltCallback>
 8001a02:	e77f      	b.n	8001904 <I2C_ITError+0x64>
 8001a04:	080017ad 	.word	0x080017ad
 8001a08:	ffff0000 	.word	0xffff0000

08001a0c <HAL_I2C_EV_IRQHandler>:
{
 8001a0c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a0e:	6803      	ldr	r3, [r0, #0]
{
 8001a10:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001a12:	6858      	ldr	r0, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a14:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a16:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a1a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a1e:	2910      	cmp	r1, #16
{
 8001a20:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001a22:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a24:	fa5f fc81 	uxtb.w	ip, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001a28:	d024      	beq.n	8001a74 <HAL_I2C_EV_IRQHandler+0x68>
 8001a2a:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001a2e:	d021      	beq.n	8001a74 <HAL_I2C_EV_IRQHandler+0x68>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a30:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001a32:	2900      	cmp	r1, #0
 8001a34:	f000 8097 	beq.w	8001b66 <HAL_I2C_EV_IRQHandler+0x15a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a38:	6959      	ldr	r1, [r3, #20]
  uint32_t sr2itflags               = 0U;
 8001a3a:	2500      	movs	r5, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a3c:	f011 0f02 	tst.w	r1, #2
 8001a40:	f3c1 0640 	ubfx	r6, r1, #1, #1
 8001a44:	d059      	beq.n	8001afa <HAL_I2C_EV_IRQHandler+0xee>
 8001a46:	0586      	lsls	r6, r0, #22
 8001a48:	d55a      	bpl.n	8001b00 <HAL_I2C_EV_IRQHandler+0xf4>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a4a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a4c:	b102      	cbz	r2, 8001a50 <HAL_I2C_EV_IRQHandler+0x44>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a4e:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001a50:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001a54:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8001a58:	2a28      	cmp	r2, #40	; 0x28
 8001a5a:	f000 8221 	beq.w	8001ea0 <HAL_I2C_EV_IRQHandler+0x494>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	920c      	str	r2, [sp, #48]	; 0x30
 8001a62:	6959      	ldr	r1, [r3, #20]
 8001a64:	910c      	str	r1, [sp, #48]	; 0x30
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	930c      	str	r3, [sp, #48]	; 0x30
 8001a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001a6c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
}
 8001a70:	b00e      	add	sp, #56	; 0x38
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a74:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001a76:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001a78:	f011 0f01 	tst.w	r1, #1
 8001a7c:	d11a      	bne.n	8001ab4 <HAL_I2C_EV_IRQHandler+0xa8>
 8001a7e:	f5b5 0f2a 	cmp.w	r5, #11141120	; 0xaa0000
 8001a82:	d0f5      	beq.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001a84:	f1b5 4f2a 	cmp.w	r5, #2852126720	; 0xaa000000
 8001a88:	d0f2      	beq.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8a:	070d      	lsls	r5, r1, #28
 8001a8c:	d56e      	bpl.n	8001b6c <HAL_I2C_EV_IRQHandler+0x160>
 8001a8e:	0585      	lsls	r5, r0, #22
 8001a90:	f140 8084 	bpl.w	8001b9c <HAL_I2C_EV_IRQHandler+0x190>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001a94:	6c62      	ldr	r2, [r4, #68]	; 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a98:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001a9a:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001a9c:	2900      	cmp	r1, #0
 8001a9e:	f000 81e6 	beq.w	8001e6e <HAL_I2C_EV_IRQHandler+0x462>
 8001aa2:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	f000 81e2 	beq.w	8001e6e <HAL_I2C_EV_IRQHandler+0x462>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	e7dd      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ab4:	0585      	lsls	r5, r0, #22
 8001ab6:	d56f      	bpl.n	8001b98 <HAL_I2C_EV_IRQHandler+0x18c>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8001ab8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001aba:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8001abe:	f000 81ec 	beq.w	8001e9a <HAL_I2C_EV_IRQHandler+0x48e>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8001ac2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ac4:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8001ac8:	bf04      	itt	eq
 8001aca:	2208      	moveq	r2, #8
 8001acc:	62e2      	streq	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ace:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001ad2:	2a40      	cmp	r2, #64	; 0x40
 8001ad4:	f000 81da 	beq.w	8001e8c <HAL_I2C_EV_IRQHandler+0x480>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ad8:	6922      	ldr	r2, [r4, #16]
 8001ada:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001ade:	f000 81b5 	beq.w	8001e4c <HAL_I2C_EV_IRQHandler+0x440>
      if (hi2c->EventCount == 0U)
 8001ae2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	f040 81ef 	bne.w	8001ec8 <HAL_I2C_EV_IRQHandler+0x4bc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001aea:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001aec:	11d2      	asrs	r2, r2, #7
 8001aee:	f002 0206 	and.w	r2, r2, #6
 8001af2:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	e7ba      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001afa:	06cd      	lsls	r5, r1, #27
 8001afc:	f100 8086 	bmi.w	8001c0c <HAL_I2C_EV_IRQHandler+0x200>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b00:	f002 02f7 	and.w	r2, r2, #247	; 0xf7
 8001b04:	2a21      	cmp	r2, #33	; 0x21
 8001b06:	f000 80ff 	beq.w	8001d08 <HAL_I2C_EV_IRQHandler+0x2fc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b0a:	064e      	lsls	r6, r1, #25
 8001b0c:	f140 8133 	bpl.w	8001d76 <HAL_I2C_EV_IRQHandler+0x36a>
 8001b10:	0545      	lsls	r5, r0, #21
 8001b12:	f140 8130 	bpl.w	8001d76 <HAL_I2C_EV_IRQHandler+0x36a>
 8001b16:	0749      	lsls	r1, r1, #29
 8001b18:	f100 8130 	bmi.w	8001d7c <HAL_I2C_EV_IRQHandler+0x370>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b1c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001b20:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001b22:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b24:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d0a2      	beq.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001b30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001b32:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001b3c:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b3e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8001b40:	6262      	str	r2, [r4, #36]	; 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d194      	bne.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001b46:	292a      	cmp	r1, #42	; 0x2a
 8001b48:	d192      	bne.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b4e:	2522      	movs	r5, #34	; 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b50:	2128      	movs	r1, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b56:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b58:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b5a:	6325      	str	r5, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b5c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b60:	f7fe fd3c 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
 8001b64:	e784      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001b66:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	e767      	b.n	8001a3c <HAL_I2C_EV_IRQHandler+0x30>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b6c:	078d      	lsls	r5, r1, #30
 8001b6e:	d515      	bpl.n	8001b9c <HAL_I2C_EV_IRQHandler+0x190>
 8001b70:	0585      	lsls	r5, r0, #22
 8001b72:	d513      	bpl.n	8001b9c <HAL_I2C_EV_IRQHandler+0x190>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001b74:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8001b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001b7a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b7c:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001b80:	2922      	cmp	r1, #34	; 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001b82:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b84:	f000 81b4 	beq.w	8001ef0 <HAL_I2C_EV_IRQHandler+0x4e4>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	920a      	str	r2, [sp, #40]	; 0x28
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	920a      	str	r2, [sp, #40]	; 0x28
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	930a      	str	r3, [sp, #40]	; 0x28
 8001b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b96:	e76b      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001b98:	070d      	lsls	r5, r1, #28
 8001b9a:	d5e7      	bpl.n	8001b6c <HAL_I2C_EV_IRQHandler+0x160>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001b9c:	0775      	lsls	r5, r6, #29
 8001b9e:	f140 80f6 	bpl.w	8001d8e <HAL_I2C_EV_IRQHandler+0x382>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ba2:	685d      	ldr	r5, [r3, #4]
 8001ba4:	052e      	lsls	r6, r5, #20
 8001ba6:	f53f af63 	bmi.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001baa:	060d      	lsls	r5, r1, #24
 8001bac:	f140 8116 	bpl.w	8001ddc <HAL_I2C_EV_IRQHandler+0x3d0>
 8001bb0:	0546      	lsls	r6, r0, #21
 8001bb2:	f140 8113 	bpl.w	8001ddc <HAL_I2C_EV_IRQHandler+0x3d0>
 8001bb6:	074d      	lsls	r5, r1, #29
 8001bb8:	f100 8113 	bmi.w	8001de2 <HAL_I2C_EV_IRQHandler+0x3d6>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bbc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bc0:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bc2:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001bc6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001bc8:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001bca:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001bcc:	2800      	cmp	r0, #0
 8001bce:	f040 823c 	bne.w	800204a <HAL_I2C_EV_IRQHandler+0x63e>
 8001bd2:	2a21      	cmp	r2, #33	; 0x21
 8001bd4:	f000 82d3 	beq.w	800217e <HAL_I2C_EV_IRQHandler+0x772>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001bd8:	2940      	cmp	r1, #64	; 0x40
 8001bda:	f47f af49 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001bde:	2a22      	cmp	r2, #34	; 0x22
 8001be0:	f47f af46 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount == 0U)
 8001be4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001be6:	b292      	uxth	r2, r2
 8001be8:	2a00      	cmp	r2, #0
 8001bea:	f000 8271 	beq.w	80020d0 <HAL_I2C_EV_IRQHandler+0x6c4>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bee:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8001bf2:	2a40      	cmp	r2, #64	; 0x40
 8001bf4:	f000 80ff 	beq.w	8001df6 <HAL_I2C_EV_IRQHandler+0x3ea>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bfa:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001bfe:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 8001c00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001c02:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001c0a:	e731      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c0c:	0585      	lsls	r5, r0, #22
 8001c0e:	f57f af77 	bpl.w	8001b00 <HAL_I2C_EV_IRQHandler+0xf4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c12:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c1c:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001c1e:	960d      	str	r6, [sp, #52]	; 0x34
 8001c20:	695a      	ldr	r2, [r3, #20]
 8001c22:	920d      	str	r2, [sp, #52]	; 0x34
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c34:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c3a:	b2ed      	uxtb	r5, r5
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001c3c:	d521      	bpl.n	8001c82 <HAL_I2C_EV_IRQHandler+0x276>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c3e:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8001c42:	2a22      	cmp	r2, #34	; 0x22
 8001c44:	f000 8171 	beq.w	8001f2a <HAL_I2C_EV_IRQHandler+0x51e>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8001c48:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c4a:	6802      	ldr	r2, [r0, #0]
 8001c4c:	6852      	ldr	r2, [r2, #4]
 8001c4e:	b292      	uxth	r2, r2
 8001c50:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001c52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c54:	b292      	uxth	r2, r2
 8001c56:	b11a      	cbz	r2, 8001c60 <HAL_I2C_EV_IRQHandler+0x254>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c5a:	f042 0204 	orr.w	r2, r2, #4
 8001c5e:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c66:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c68:	f7ff fad6 	bl	8001218 <HAL_DMA_GetState>
 8001c6c:	2801      	cmp	r0, #1
 8001c6e:	d008      	beq.n	8001c82 <HAL_I2C_EV_IRQHandler+0x276>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001c70:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c72:	4b9b      	ldr	r3, [pc, #620]	; (8001ee0 <HAL_I2C_EV_IRQHandler+0x4d4>)
 8001c74:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001c76:	f7ff fabd 	bl	80011f4 <HAL_DMA_Abort_IT>
 8001c7a:	b110      	cbz	r0, 8001c82 <HAL_I2C_EV_IRQHandler+0x276>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001c7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c80:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8001c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b313      	cbz	r3, 8001cce <HAL_I2C_EV_IRQHandler+0x2c2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	0752      	lsls	r2, r2, #29
 8001c8e:	d50a      	bpl.n	8001ca6 <HAL_I2C_EV_IRQHandler+0x29a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001c96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001c9a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8001c9c:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 8001c9e:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001ca0:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8001ca2:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001ca4:	8562      	strh	r2, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	0656      	lsls	r6, r2, #25
 8001caa:	d509      	bpl.n	8001cc0 <HAL_I2C_EV_IRQHandler+0x2b4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001cb2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001cb4:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001cb6:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8001cb8:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8001cba:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8001cbc:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001cbe:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8001cc0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b11b      	cbz	r3, 8001cce <HAL_I2C_EV_IRQHandler+0x2c2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f040 80d5 	bne.w	8001e80 <HAL_I2C_EV_IRQHandler+0x474>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001cd6:	2d2a      	cmp	r5, #42	; 0x2a
 8001cd8:	f000 8148 	beq.w	8001f6c <HAL_I2C_EV_IRQHandler+0x560>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001cdc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001ce0:	2b28      	cmp	r3, #40	; 0x28
 8001ce2:	f000 814b 	beq.w	8001f7c <HAL_I2C_EV_IRQHandler+0x570>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ce8:	2b22      	cmp	r3, #34	; 0x22
 8001cea:	d002      	beq.n	8001cf2 <HAL_I2C_EV_IRQHandler+0x2e6>
 8001cec:	2d22      	cmp	r5, #34	; 0x22
 8001cee:	f47f aebf 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cf2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cf6:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cf8:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d02:	f7fe fc6b 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
 8001d06:	e6b3      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d08:	060d      	lsls	r5, r1, #24
 8001d0a:	d528      	bpl.n	8001d5e <HAL_I2C_EV_IRQHandler+0x352>
 8001d0c:	0546      	lsls	r6, r0, #21
 8001d0e:	d526      	bpl.n	8001d5e <HAL_I2C_EV_IRQHandler+0x352>
 8001d10:	074d      	lsls	r5, r1, #29
 8001d12:	d427      	bmi.n	8001d64 <HAL_I2C_EV_IRQHandler+0x358>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d14:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8001d18:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d1a:	b289      	uxth	r1, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d1c:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8001d1e:	2900      	cmp	r1, #0
 8001d20:	f43f aea6 	beq.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d26:	f811 5b01 	ldrb.w	r5, [r1], #1
 8001d2a:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8001d2c:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001d2e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d30:	3901      	subs	r1, #1
 8001d32:	b289      	uxth	r1, r1
 8001d34:	8561      	strh	r1, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d36:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001d38:	b289      	uxth	r1, r1
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	f47f ae98 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001d40:	2829      	cmp	r0, #41	; 0x29
 8001d42:	f47f ae95 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d46:	6859      	ldr	r1, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d48:	2528      	movs	r5, #40	; 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d4a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001d4e:	6059      	str	r1, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d50:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d52:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001d54:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d58:	f7fe fc42 	bl	80005e0 <HAL_I2C_SlaveTxCpltCallback>
 8001d5c:	e688      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5e:	0749      	lsls	r1, r1, #29
 8001d60:	f57f ae86 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001d64:	0582      	lsls	r2, r0, #22
 8001d66:	f57f ae83 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 8001d6a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	2a00      	cmp	r2, #0
 8001d70:	f43f ae7e 	beq.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001d74:	e740      	b.n	8001bf8 <HAL_I2C_EV_IRQHandler+0x1ec>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d76:	074a      	lsls	r2, r1, #29
 8001d78:	f57f ae7a 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001d7c:	0586      	lsls	r6, r0, #22
 8001d7e:	f57f ae77 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
  if (hi2c->XferCount != 0U)
 8001d82:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001d84:	b292      	uxth	r2, r2
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	f43f ae72 	beq.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001d8c:	e01b      	b.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x3ba>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	0515      	lsls	r5, r2, #20
 8001d92:	f53f ae6d 	bmi.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d96:	064a      	lsls	r2, r1, #25
 8001d98:	d433      	bmi.n	8001e02 <HAL_I2C_EV_IRQHandler+0x3f6>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d9a:	0749      	lsls	r1, r1, #29
 8001d9c:	f57f ae68 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001da0:	0582      	lsls	r2, r0, #22
 8001da2:	f57f ae65 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001da6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8001da8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001daa:	b292      	uxth	r2, r2
 8001dac:	2a04      	cmp	r2, #4
 8001dae:	f000 8119 	beq.w	8001fe4 <HAL_I2C_EV_IRQHandler+0x5d8>
  else if (hi2c->XferCount == 3U)
 8001db2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001db4:	b292      	uxth	r2, r2
 8001db6:	2a03      	cmp	r2, #3
 8001db8:	f000 8159 	beq.w	800206e <HAL_I2C_EV_IRQHandler+0x662>
  else if (hi2c->XferCount == 2U)
 8001dbc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001dbe:	b292      	uxth	r2, r2
 8001dc0:	2a02      	cmp	r2, #2
 8001dc2:	f000 818a 	beq.w	80020da <HAL_I2C_EV_IRQHandler+0x6ce>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001dcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8001dce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001dd0:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8001dd2:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8001dd4:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8001dd6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8001dd8:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8001dda:	e649      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ddc:	0749      	lsls	r1, r1, #29
 8001dde:	f57f ae47 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001de2:	0586      	lsls	r6, r0, #22
 8001de4:	f57f ae44 	bpl.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001de8:	2a21      	cmp	r2, #33	; 0x21
 8001dea:	f000 8103 	beq.w	8001ff4 <HAL_I2C_EV_IRQHandler+0x5e8>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001dee:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 8001df2:	f47f ae3d 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001df6:	4620      	mov	r0, r4
}
 8001df8:	b00e      	add	sp, #56	; 0x38
 8001dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001dfe:	f7ff bc73 	b.w	80016e8 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e02:	0546      	lsls	r6, r0, #21
 8001e04:	d5c9      	bpl.n	8001d9a <HAL_I2C_EV_IRQHandler+0x38e>
 8001e06:	074d      	lsls	r5, r1, #29
 8001e08:	f3c1 0280 	ubfx	r2, r1, #2, #1
 8001e0c:	d4c8      	bmi.n	8001da0 <HAL_I2C_EV_IRQHandler+0x394>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e0e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8001e12:	2922      	cmp	r1, #34	; 0x22
 8001e14:	f47f ae2c 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    tmp = hi2c->XferCount;
 8001e18:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8001e1a:	b289      	uxth	r1, r1
    if (tmp > 3U)
 8001e1c:	2903      	cmp	r1, #3
 8001e1e:	f240 81c5 	bls.w	80021ac <HAL_I2C_EV_IRQHandler+0x7a0>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8001e2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8001e32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e34:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8001e36:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8001e38:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8001e3a:	6262      	str	r2, [r4, #36]	; 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8001e3c:	f47f ae18 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e40:	6822      	ldr	r2, [r4, #0]
 8001e42:	6853      	ldr	r3, [r2, #4]
 8001e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e48:	6053      	str	r3, [r2, #4]
 8001e4a:	e611      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e4c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001e50:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e52:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e54:	bf16      	itet	ne
 8001e56:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e5a:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001e5e:	b2d2      	uxtbne	r2, r2
 8001e60:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8001e62:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001e64:	b11a      	cbz	r2, 8001e6e <HAL_I2C_EV_IRQHandler+0x462>
 8001e66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	f47f ae1e 	bne.w	8001aaa <HAL_I2C_EV_IRQHandler+0x9e>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8001e6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	f43f adfd 	beq.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001e76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e78:	2a00      	cmp	r2, #0
 8001e7a:	f47f ae16 	bne.w	8001aaa <HAL_I2C_EV_IRQHandler+0x9e>
 8001e7e:	e5f7      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    I2C_ITError(hi2c);
 8001e80:	4620      	mov	r0, r4
}
 8001e82:	b00e      	add	sp, #56	; 0x38
 8001e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8001e88:	f7ff bd0a 	b.w	80018a0 <I2C_ITError>
    if (hi2c->EventCount == 0U)
 8001e8c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001e8e:	bb4a      	cbnz	r2, 8001ee4 <HAL_I2C_EV_IRQHandler+0x4d8>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001e90:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001e92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e96:	611a      	str	r2, [r3, #16]
 8001e98:	e5ea      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001e9e:	e616      	b.n	8001ace <HAL_I2C_EV_IRQHandler+0xc2>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea6:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001ea8:	062e      	lsls	r6, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001eaa:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_UNLOCK(hi2c);
 8001eae:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001eb2:	bf54      	ite	pl
 8001eb4:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001eb6:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8001eb8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001ebc:	f001 0101 	and.w	r1, r1, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	f7fe fb67 	bl	8000594 <HAL_I2C_AddrCallback>
 8001ec6:	e5d3      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      else if (hi2c->EventCount == 1U)
 8001ec8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001eca:	2a01      	cmp	r2, #1
 8001ecc:	f47f add0 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001ed0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ed2:	11d2      	asrs	r2, r2, #7
 8001ed4:	f002 0206 	and.w	r2, r2, #6
 8001ed8:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	e5c7      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 8001ee0:	080017ad 	.word	0x080017ad
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ee4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	e5bf      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001ef0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001ef2:	b911      	cbnz	r1, 8001efa <HAL_I2C_EV_IRQHandler+0x4ee>
 8001ef4:	2a40      	cmp	r2, #64	; 0x40
 8001ef6:	f000 80a1 	beq.w	800203c <HAL_I2C_EV_IRQHandler+0x630>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001efa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001efc:	b922      	cbnz	r2, 8001f08 <HAL_I2C_EV_IRQHandler+0x4fc>
 8001efe:	6921      	ldr	r1, [r4, #16]
 8001f00:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8001f04:	f000 80a5 	beq.w	8002052 <HAL_I2C_EV_IRQHandler+0x646>
      if (hi2c->XferCount == 0U)
 8001f08:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f0a:	b292      	uxth	r2, r2
 8001f0c:	2a00      	cmp	r2, #0
 8001f0e:	d142      	bne.n	8001f96 <HAL_I2C_EV_IRQHandler+0x58a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f10:	9203      	str	r2, [sp, #12]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	9203      	str	r2, [sp, #12]
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	9203      	str	r2, [sp, #12]
 8001f1a:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f22:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	6523      	str	r3, [r4, #80]	; 0x50
 8001f28:	e5a2      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8001f2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f2c:	6802      	ldr	r2, [r0, #0]
 8001f2e:	6852      	ldr	r2, [r2, #4]
 8001f30:	b292      	uxth	r2, r2
 8001f32:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8001f34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f36:	b292      	uxth	r2, r2
 8001f38:	b11a      	cbz	r2, 8001f42 <HAL_I2C_EV_IRQHandler+0x536>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f3c:	f042 0204 	orr.w	r2, r2, #4
 8001f40:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f48:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f4a:	f7ff f965 	bl	8001218 <HAL_DMA_GetState>
 8001f4e:	2801      	cmp	r0, #1
 8001f50:	f43f ae97 	beq.w	8001c82 <HAL_I2C_EV_IRQHandler+0x276>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001f54:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f56:	4b9d      	ldr	r3, [pc, #628]	; (80021cc <HAL_I2C_EV_IRQHandler+0x7c0>)
 8001f58:	6503      	str	r3, [r0, #80]	; 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001f5a:	f7ff f94b 	bl	80011f4 <HAL_DMA_Abort_IT>
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	f43f ae8f 	beq.w	8001c82 <HAL_I2C_EV_IRQHandler+0x276>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001f64:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001f66:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001f68:	4798      	blx	r3
 8001f6a:	e68a      	b.n	8001c82 <HAL_I2C_EV_IRQHandler+0x276>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f6c:	2228      	movs	r2, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f6e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f70:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f72:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f76:	f7fe fb31 	bl	80005dc <HAL_I2C_SlaveRxCpltCallback>
 8001f7a:	e6af      	b.n	8001cdc <HAL_I2C_EV_IRQHandler+0x2d0>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f7c:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f7e:	4994      	ldr	r1, [pc, #592]	; (80021d0 <HAL_I2C_EV_IRQHandler+0x7c4>)
 8001f80:	62e1      	str	r1, [r4, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f84:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8001f86:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8001f88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001f90:	f7fe faea 	bl	8000568 <HAL_I2C_ListenCpltCallback>
 8001f94:	e56c      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      else if (hi2c->XferCount == 1U)
 8001f96:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f98:	b292      	uxth	r2, r2
 8001f9a:	2a01      	cmp	r2, #1
 8001f9c:	d076      	beq.n	800208c <HAL_I2C_EV_IRQHandler+0x680>
      else if (hi2c->XferCount == 2U)
 8001f9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001fa0:	b292      	uxth	r2, r2
 8001fa2:	2a02      	cmp	r2, #2
 8001fa4:	f000 8152 	beq.w	800224c <HAL_I2C_EV_IRQHandler+0x840>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fae:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	0512      	lsls	r2, r2, #20
 8001fb4:	d50e      	bpl.n	8001fd4 <HAL_I2C_EV_IRQHandler+0x5c8>
 8001fb6:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8001fba:	d007      	beq.n	8001fcc <HAL_I2C_EV_IRQHandler+0x5c0>
 8001fbc:	3801      	subs	r0, #1
 8001fbe:	281f      	cmp	r0, #31
 8001fc0:	d808      	bhi.n	8001fd4 <HAL_I2C_EV_IRQHandler+0x5c8>
 8001fc2:	4a84      	ldr	r2, [pc, #528]	; (80021d4 <HAL_I2C_EV_IRQHandler+0x7c8>)
 8001fc4:	fa22 f000 	lsr.w	r0, r2, r0
 8001fc8:	07c6      	lsls	r6, r0, #31
 8001fca:	d503      	bpl.n	8001fd4 <HAL_I2C_EV_IRQHandler+0x5c8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fd2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	9209      	str	r2, [sp, #36]	; 0x24
 8001fd8:	695a      	ldr	r2, [r3, #20]
 8001fda:	9209      	str	r2, [sp, #36]	; 0x24
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	9309      	str	r3, [sp, #36]	; 0x24
 8001fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fe2:	e79f      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x518>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fe4:	685a      	ldr	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fe6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fec:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8001ff2:	e6eb      	b.n	8001dcc <HAL_I2C_EV_IRQHandler+0x3c0>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ff4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ff6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001ffa:	2a21      	cmp	r2, #33	; 0x21
 8001ffc:	f47f ad38 	bne.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->XferCount != 0U)
 8002000:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002002:	b292      	uxth	r2, r2
 8002004:	2a00      	cmp	r2, #0
 8002006:	f47f adf7 	bne.w	8001bf8 <HAL_I2C_EV_IRQHandler+0x1ec>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800200a:	2908      	cmp	r1, #8
 800200c:	f000 809f 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x742>
 8002010:	2920      	cmp	r1, #32
 8002012:	f000 809c 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x742>
 8002016:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800201a:	f000 8098 	beq.w	800214e <HAL_I2C_EV_IRQHandler+0x742>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002024:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002026:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8002028:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800202a:	6320      	str	r0, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800202c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002030:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8002032:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002036:	f7ff fb51 	bl	80016dc <HAL_I2C_MasterTxCpltCallback>
 800203a:	e519      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203c:	9101      	str	r1, [sp, #4]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	9201      	str	r2, [sp, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	9b01      	ldr	r3, [sp, #4]
 8002048:	e512      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800204a:	2a21      	cmp	r2, #33	; 0x21
 800204c:	f43f adca 	beq.w	8001be4 <HAL_I2C_EV_IRQHandler+0x1d8>
 8002050:	e5c2      	b.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x1cc>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002052:	9202      	str	r2, [sp, #8]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	9202      	str	r2, [sp, #8]
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	9202      	str	r2, [sp, #8]
 800205c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002064:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002066:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002068:	3301      	adds	r3, #1
 800206a:	6523      	str	r3, [r4, #80]	; 0x50
 800206c:	e500      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800206e:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002070:	2904      	cmp	r1, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002076:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002078:	f43f aea5 	beq.w	8001dc6 <HAL_I2C_EV_IRQHandler+0x3ba>
 800207c:	2902      	cmp	r1, #2
 800207e:	f43f aea2 	beq.w	8001dc6 <HAL_I2C_EV_IRQHandler+0x3ba>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e69c      	b.n	8001dc6 <HAL_I2C_EV_IRQHandler+0x3ba>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800208c:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8002090:	f000 80fc 	beq.w	800228c <HAL_I2C_EV_IRQHandler+0x880>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002094:	2808      	cmp	r0, #8
 8002096:	f000 80c9 	beq.w	800222c <HAL_I2C_EV_IRQHandler+0x820>
 800209a:	2820      	cmp	r0, #32
 800209c:	f000 80c6 	beq.w	800222c <HAL_I2C_EV_IRQHandler+0x820>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80020a0:	2d12      	cmp	r5, #18
 80020a2:	f000 8132 	beq.w	800230a <HAL_I2C_EV_IRQHandler+0x8fe>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80020a6:	2810      	cmp	r0, #16
 80020a8:	f200 8131 	bhi.w	800230e <HAL_I2C_EV_IRQHandler+0x902>
 80020ac:	4a4a      	ldr	r2, [pc, #296]	; (80021d8 <HAL_I2C_EV_IRQHandler+0x7cc>)
 80020ae:	fa22 f000 	lsr.w	r0, r2, r0
 80020b2:	07c1      	lsls	r1, r0, #31
 80020b4:	f140 812b 	bpl.w	800230e <HAL_I2C_EV_IRQHandler+0x902>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020be:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c0:	2200      	movs	r2, #0
 80020c2:	9206      	str	r2, [sp, #24]
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	9206      	str	r2, [sp, #24]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	9306      	str	r3, [sp, #24]
 80020cc:	9b06      	ldr	r3, [sp, #24]
 80020ce:	e729      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x518>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	e4ca      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020da:	2901      	cmp	r1, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020dc:	681a      	ldr	r2, [r3, #0]
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80020de:	f000 80d1 	beq.w	8002284 <HAL_I2C_EV_IRQHandler+0x878>
 80020e2:	2910      	cmp	r1, #16
 80020e4:	f000 80ce 	beq.w	8002284 <HAL_I2C_EV_IRQHandler+0x878>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80020e8:	2904      	cmp	r1, #4
 80020ea:	f000 810a 	beq.w	8002302 <HAL_I2C_EV_IRQHandler+0x8f6>
 80020ee:	2902      	cmp	r1, #2
 80020f0:	f000 8107 	beq.w	8002302 <HAL_I2C_EV_IRQHandler+0x8f6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8002100:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr++;
 8002102:	6a62      	ldr	r2, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002104:	6821      	ldr	r1, [r4, #0]
    hi2c->XferCount--;
 8002106:	3b01      	subs	r3, #1
 8002108:	b29b      	uxth	r3, r3
 800210a:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210c:	690b      	ldr	r3, [r1, #16]
    hi2c->pBuffPtr++;
 800210e:	1c51      	adds	r1, r2, #1
 8002110:	6261      	str	r1, [r4, #36]	; 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8002114:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002116:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8002118:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800211a:	3b01      	subs	r3, #1
 800211c:	b29b      	uxth	r3, r3
 800211e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002120:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8002122:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    hi2c->State = HAL_I2C_STATE_READY;
 8002128:	2020      	movs	r0, #32
    hi2c->pBuffPtr++;
 800212a:	6262      	str	r2, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800212c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002132:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	f000 80bc 	beq.w	80022b4 <HAL_I2C_EV_IRQHandler+0x8a8>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	2200      	movs	r2, #0
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800213e:	2312      	movs	r3, #18
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002144:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002146:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002148:	f7ff faca 	bl	80016e0 <HAL_I2C_MasterRxCpltCallback>
 800214c:	e490      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002154:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002158:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800215a:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002160:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002162:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002164:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002168:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800216c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002170:	2b40      	cmp	r3, #64	; 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002172:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002174:	f47f af5f 	bne.w	8002036 <HAL_I2C_EV_IRQHandler+0x62a>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002178:	f7ff fab4 	bl	80016e4 <HAL_I2C_MemTxCpltCallback>
 800217c:	e478      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800217e:	2d08      	cmp	r5, #8
 8002180:	d0e5      	beq.n	800214e <HAL_I2C_EV_IRQHandler+0x742>
 8002182:	2d20      	cmp	r5, #32
 8002184:	d0e3      	beq.n	800214e <HAL_I2C_EV_IRQHandler+0x742>
 8002186:	f515 3f80 	cmn.w	r5, #65536	; 0x10000
 800218a:	d0e0      	beq.n	800214e <HAL_I2C_EV_IRQHandler+0x742>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002192:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002194:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002198:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800219a:	6320      	str	r0, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021a0:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021a6:	f7ff fa99 	bl	80016dc <HAL_I2C_MasterTxCpltCallback>
 80021aa:	e461      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80021ac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80021ae:	2802      	cmp	r0, #2
 80021b0:	d08e      	beq.n	80020d0 <HAL_I2C_EV_IRQHandler+0x6c4>
 80021b2:	2901      	cmp	r1, #1
 80021b4:	d88c      	bhi.n	80020d0 <HAL_I2C_EV_IRQHandler+0x6c4>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80021b6:	4909      	ldr	r1, [pc, #36]	; (80021dc <HAL_I2C_EV_IRQHandler+0x7d0>)
  __IO uint32_t count = 0U;
 80021b8:	920b      	str	r2, [sp, #44]	; 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80021c0:	fbb1 f1f0 	udiv	r1, r1, r0
 80021c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021c8:	910b      	str	r1, [sp, #44]	; 0x2c
 80021ca:	e00e      	b.n	80021ea <HAL_I2C_EV_IRQHandler+0x7de>
 80021cc:	080017ad 	.word	0x080017ad
 80021d0:	ffff0000 	.word	0xffff0000
 80021d4:	80008081 	.word	0x80008081
 80021d8:	00010014 	.word	0x00010014
 80021dc:	20000000 	.word	0x20000000
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80021e6:	f000 8097 	beq.w	8002318 <HAL_I2C_EV_IRQHandler+0x90c>
    count--;
 80021ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80021ec:	3a01      	subs	r2, #1
 80021ee:	920b      	str	r2, [sp, #44]	; 0x2c
    if (count == 0U)
 80021f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d1f4      	bne.n	80021e0 <HAL_I2C_EV_IRQHandler+0x7d4>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021fa:	f042 0220 	orr.w	r2, r2, #32
 80021fe:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002206:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 800220c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800220e:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002210:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8002212:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8002214:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8002216:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8002218:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->pBuffPtr++;
 800221a:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 800221c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8002220:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002226:	f7fe f9ed 	bl	8000604 <HAL_I2C_ErrorCallback>
 800222a:	e421      	b.n	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222c:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002230:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002234:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	9107      	str	r1, [sp, #28]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	9207      	str	r2, [sp, #28]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	9207      	str	r2, [sp, #28]
 8002240:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e66b      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x518>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800224c:	2810      	cmp	r0, #16
 800224e:	d93a      	bls.n	80022c6 <HAL_I2C_EV_IRQHandler+0x8ba>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800225e:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	0516      	lsls	r6, r2, #20
 8002264:	d506      	bpl.n	8002274 <HAL_I2C_EV_IRQHandler+0x868>
 8002266:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800226a:	d137      	bne.n	80022dc <HAL_I2C_EV_IRQHandler+0x8d0>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002272:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002274:	2200      	movs	r2, #0
 8002276:	9208      	str	r2, [sp, #32]
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	9208      	str	r2, [sp, #32]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	9308      	str	r3, [sp, #32]
 8002280:	9b08      	ldr	r3, [sp, #32]
 8002282:	e64f      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x518>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e736      	b.n	80020fa <HAL_I2C_EV_IRQHandler+0x6ee>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002292:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800229a:	d027      	beq.n	80022ec <HAL_I2C_EV_IRQHandler+0x8e0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800229c:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022a4:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	9104      	str	r1, [sp, #16]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	9204      	str	r2, [sp, #16]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	9304      	str	r3, [sp, #16]
 80022b0:	9b04      	ldr	r3, [sp, #16]
 80022b2:	e637      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x518>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022ba:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 80022bc:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022be:	f7ff fa71 	bl	80017a4 <HAL_I2C_MemRxCpltCallback>
 80022c2:	f7ff bbd5 	b.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022c6:	4a25      	ldr	r2, [pc, #148]	; (800235c <HAL_I2C_EV_IRQHandler+0x950>)
 80022c8:	40c2      	lsrs	r2, r0
 80022ca:	07d2      	lsls	r2, r2, #31
 80022cc:	d5c0      	bpl.n	8002250 <HAL_I2C_EV_IRQHandler+0x844>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d4:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	0515      	lsls	r5, r2, #20
 80022da:	d5cb      	bpl.n	8002274 <HAL_I2C_EV_IRQHandler+0x868>
 80022dc:	3801      	subs	r0, #1
 80022de:	281f      	cmp	r0, #31
 80022e0:	d8c8      	bhi.n	8002274 <HAL_I2C_EV_IRQHandler+0x868>
 80022e2:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_I2C_EV_IRQHandler+0x954>)
 80022e4:	40c2      	lsrs	r2, r0
 80022e6:	07d1      	lsls	r1, r2, #31
 80022e8:	d5c4      	bpl.n	8002274 <HAL_I2C_EV_IRQHandler+0x868>
 80022ea:	e7bf      	b.n	800226c <HAL_I2C_EV_IRQHandler+0x860>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ec:	9205      	str	r2, [sp, #20]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	9205      	str	r2, [sp, #20]
 80022f2:	699a      	ldr	r2, [r3, #24]
 80022f4:	9205      	str	r2, [sp, #20]
 80022f6:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e610      	b.n	8001f24 <HAL_I2C_EV_IRQHandler+0x518>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002302:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e6f7      	b.n	80020fa <HAL_I2C_EV_IRQHandler+0x6ee>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800230a:	2801      	cmp	r0, #1
 800230c:	d18e      	bne.n	800222c <HAL_I2C_EV_IRQHandler+0x820>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e6d3      	b.n	80020c0 <HAL_I2C_EV_IRQHandler+0x6b4>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002318:	6819      	ldr	r1, [r3, #0]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800231a:	6a60      	ldr	r0, [r4, #36]	; 0x24
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002320:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002328:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 800232e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002330:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8002332:	2120      	movs	r1, #32
        hi2c->XferCount--;
 8002334:	b29b      	uxth	r3, r3
 8002336:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002338:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        hi2c->pBuffPtr++;
 800233c:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800233e:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
        hi2c->pBuffPtr++;
 8002342:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002344:	2940      	cmp	r1, #64	; 0x40
        hi2c->pBuffPtr++;
 8002346:	6263      	str	r3, [r4, #36]	; 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002348:	f47f aef9 	bne.w	800213e <HAL_I2C_EV_IRQHandler+0x732>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002350:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8002352:	6322      	str	r2, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002354:	f7ff fa26 	bl	80017a4 <HAL_I2C_MemRxCpltCallback>
 8002358:	f7ff bb8a 	b.w	8001a70 <HAL_I2C_EV_IRQHandler+0x64>
 800235c:	00010014 	.word	0x00010014
 8002360:	80008081 	.word	0x80008081

08002364 <HAL_I2C_ER_IRQHandler>:
{
 8002364:	b530      	push	{r4, r5, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800236a:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800236c:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002370:	05e5      	lsls	r5, r4, #23
{
 8002372:	b083      	sub	sp, #12
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002374:	fa5f fc81 	uxtb.w	ip, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002378:	d533      	bpl.n	80023e2 <HAL_I2C_ER_IRQHandler+0x7e>
 800237a:	05d1      	lsls	r1, r2, #23
 800237c:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 8002380:	d52f      	bpl.n	80023e2 <HAL_I2C_ER_IRQHandler+0x7e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002382:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002386:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002388:	05a2      	lsls	r2, r4, #22
 800238a:	d43c      	bmi.n	8002406 <HAL_I2C_ER_IRQHandler+0xa2>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800238c:	0562      	lsls	r2, r4, #21
 800238e:	d572      	bpl.n	8002476 <HAL_I2C_ER_IRQHandler+0x112>
    error |= HAL_I2C_ERROR_BERR;
 8002390:	2101      	movs	r1, #1
    tmp2 = hi2c->XferCount;
 8002392:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002394:	f890 e03d 	ldrb.w	lr, [r0, #61]	; 0x3d
    tmp4 = hi2c->PreviousState;
 8002398:	6b05      	ldr	r5, [r0, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800239a:	f1bc 0f20 	cmp.w	ip, #32
    tmp2 = hi2c->XferCount;
 800239e:	b292      	uxth	r2, r2
    tmp3 = hi2c->State;
 80023a0:	fa5f fe8e 	uxtb.w	lr, lr
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80023a4:	d03d      	beq.n	8002422 <HAL_I2C_ER_IRQHandler+0xbe>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023aa:	f1bc 0f10 	cmp.w	ip, #16
      error |= HAL_I2C_ERROR_AF;
 80023ae:	f041 0104 	orr.w	r1, r1, #4
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b2:	615a      	str	r2, [r3, #20]
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80023b4:	d002      	beq.n	80023bc <HAL_I2C_ER_IRQHandler+0x58>
 80023b6:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
 80023ba:	d103      	bne.n	80023c4 <HAL_I2C_ER_IRQHandler+0x60>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c2:	601a      	str	r2, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023c4:	0522      	lsls	r2, r4, #20
 80023c6:	d504      	bpl.n	80023d2 <HAL_I2C_ER_IRQHandler+0x6e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023c8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    error |= HAL_I2C_ERROR_OVR;
 80023cc:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023d0:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80023d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023d4:	4319      	orrs	r1, r3
 80023d6:	6401      	str	r1, [r0, #64]	; 0x40
}
 80023d8:	b003      	add	sp, #12
 80023da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    I2C_ITError(hi2c);
 80023de:	f7ff ba5f 	b.w	80018a0 <I2C_ITError>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023e2:	05a5      	lsls	r5, r4, #22
 80023e4:	d503      	bpl.n	80023ee <HAL_I2C_ER_IRQHandler+0x8a>
 80023e6:	05d1      	lsls	r1, r2, #23
 80023e8:	ea4f 2e12 	mov.w	lr, r2, lsr #8
 80023ec:	d417      	bmi.n	800241e <HAL_I2C_ER_IRQHandler+0xba>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023ee:	0565      	lsls	r5, r4, #21
 80023f0:	f3c4 2180 	ubfx	r1, r4, #10, #1
 80023f4:	d403      	bmi.n	80023fe <HAL_I2C_ER_IRQHandler+0x9a>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023f6:	0524      	lsls	r4, r4, #20
 80023f8:	d434      	bmi.n	8002464 <HAL_I2C_ER_IRQHandler+0x100>
}
 80023fa:	b003      	add	sp, #12
 80023fc:	bd30      	pop	{r4, r5, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80023fe:	05d1      	lsls	r1, r2, #23
 8002400:	d5fb      	bpl.n	80023fa <HAL_I2C_ER_IRQHandler+0x96>
 8002402:	2100      	movs	r1, #0
 8002404:	e7c5      	b.n	8002392 <HAL_I2C_ER_IRQHandler+0x2e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002406:	2103      	movs	r1, #3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002408:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800240c:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800240e:	0562      	lsls	r2, r4, #21
 8002410:	d4bf      	bmi.n	8002392 <HAL_I2C_ER_IRQHandler+0x2e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002412:	0524      	lsls	r4, r4, #20
 8002414:	d5dd      	bpl.n	80023d2 <HAL_I2C_ER_IRQHandler+0x6e>
 8002416:	f01e 0f01 	tst.w	lr, #1
 800241a:	d1d5      	bne.n	80023c8 <HAL_I2C_ER_IRQHandler+0x64>
 800241c:	e7d9      	b.n	80023d2 <HAL_I2C_ER_IRQHandler+0x6e>
 800241e:	2102      	movs	r1, #2
 8002420:	e7f2      	b.n	8002408 <HAL_I2C_ER_IRQHandler+0xa4>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002422:	b9ca      	cbnz	r2, 8002458 <HAL_I2C_ER_IRQHandler+0xf4>
 8002424:	f00e 02f7 	and.w	r2, lr, #247	; 0xf7
 8002428:	2a21      	cmp	r2, #33	; 0x21
 800242a:	d004      	beq.n	8002436 <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800242c:	f1be 0f28 	cmp.w	lr, #40	; 0x28
 8002430:	d112      	bne.n	8002458 <HAL_I2C_ER_IRQHandler+0xf4>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002432:	2d21      	cmp	r5, #33	; 0x21
 8002434:	d110      	bne.n	8002458 <HAL_I2C_ER_IRQHandler+0xf4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002436:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800243a:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800243c:	2d08      	cmp	r5, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800243e:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002440:	d01e      	beq.n	8002480 <HAL_I2C_ER_IRQHandler+0x11c>
 8002442:	2d20      	cmp	r5, #32
 8002444:	d01c      	beq.n	8002480 <HAL_I2C_ER_IRQHandler+0x11c>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002446:	2a21      	cmp	r2, #33	; 0x21
 8002448:	d037      	beq.n	80024ba <HAL_I2C_ER_IRQHandler+0x156>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800244e:	615a      	str	r2, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002450:	0525      	lsls	r5, r4, #20
 8002452:	d50c      	bpl.n	800246e <HAL_I2C_ER_IRQHandler+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	e7b7      	b.n	80023c8 <HAL_I2C_ER_IRQHandler+0x64>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002458:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800245c:	615a      	str	r2, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 800245e:	f041 0104 	orr.w	r1, r1, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002462:	e7af      	b.n	80023c4 <HAL_I2C_ER_IRQHandler+0x60>
 8002464:	ea4f 2e12 	mov.w	lr, r2, lsr #8
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002468:	f01e 0f01 	tst.w	lr, #1
 800246c:	d1ac      	bne.n	80023c8 <HAL_I2C_ER_IRQHandler+0x64>
  if (error != HAL_I2C_ERROR_NONE)
 800246e:	2900      	cmp	r1, #0
 8002470:	d1af      	bne.n	80023d2 <HAL_I2C_ER_IRQHandler+0x6e>
}
 8002472:	b003      	add	sp, #12
 8002474:	bd30      	pop	{r4, r5, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002476:	0525      	lsls	r5, r4, #20
    error |= HAL_I2C_ERROR_BERR;
 8002478:	f04f 0101 	mov.w	r1, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800247c:	d4f4      	bmi.n	8002468 <HAL_I2C_ER_IRQHandler+0x104>
 800247e:	e7a8      	b.n	80023d2 <HAL_I2C_ER_IRQHandler+0x6e>
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002480:	2a28      	cmp	r2, #40	; 0x28
 8002482:	d1e0      	bne.n	8002446 <HAL_I2C_ER_IRQHandler+0xe2>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002484:	4a1a      	ldr	r2, [pc, #104]	; (80024f0 <HAL_I2C_ER_IRQHandler+0x18c>)
 8002486:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	9101      	str	r1, [sp, #4]
 800248c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002490:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002496:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002498:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800249a:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a0:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80024a2:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80024a4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80024a8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80024b0:	f7fe f85a 	bl	8000568 <HAL_I2C_ListenCpltCallback>
 80024b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80024b8:	e7ca      	b.n	8002450 <HAL_I2C_ER_IRQHandler+0xec>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80024ba:	4d0d      	ldr	r5, [pc, #52]	; (80024f0 <HAL_I2C_ER_IRQHandler+0x18c>)
 80024bc:	62c5      	str	r5, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024be:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80024c0:	2220      	movs	r2, #32
 80024c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80024c6:	2200      	movs	r2, #0
 80024c8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	9101      	str	r1, [sp, #4]
 80024d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024d4:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024da:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024dc:	681a      	ldr	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024de:	9000      	str	r0, [sp, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e4:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024e6:	f7fe f87b 	bl	80005e0 <HAL_I2C_SlaveTxCpltCallback>
 80024ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80024ee:	e7af      	b.n	8002450 <HAL_I2C_ER_IRQHandler+0xec>
 80024f0:	ffff0000 	.word	0xffff0000

080024f4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024f4:	2800      	cmp	r0, #0
 80024f6:	f000 81a2 	beq.w	800283e <HAL_RCC_OscConfig+0x34a>
{
 80024fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	07dd      	lsls	r5, r3, #31
{
 8002502:	b082      	sub	sp, #8
 8002504:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002506:	d52f      	bpl.n	8002568 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002508:	499e      	ldr	r1, [pc, #632]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 800250a:	688a      	ldr	r2, [r1, #8]
 800250c:	f002 020c 	and.w	r2, r2, #12
 8002510:	2a04      	cmp	r2, #4
 8002512:	f000 80ed 	beq.w	80026f0 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002516:	688a      	ldr	r2, [r1, #8]
 8002518:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251c:	2a08      	cmp	r2, #8
 800251e:	f000 80e3 	beq.w	80026e8 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	6863      	ldr	r3, [r4, #4]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	f000 80ec 	beq.w	8002704 <HAL_RCC_OscConfig+0x210>
 800252c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002530:	f000 8175 	beq.w	800281e <HAL_RCC_OscConfig+0x32a>
 8002534:	4d93      	ldr	r5, [pc, #588]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 8002536:	682a      	ldr	r2, [r5, #0]
 8002538:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800253c:	602a      	str	r2, [r5, #0]
 800253e:	682a      	ldr	r2, [r5, #0]
 8002540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002544:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80e1 	bne.w	800270e <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7fe fd8c 	bl	8001068 <HAL_GetTick>
 8002550:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002552:	e005      	b.n	8002560 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe fd88 	bl	8001068 <HAL_GetTick>
 8002558:	1b80      	subs	r0, r0, r6
 800255a:	2864      	cmp	r0, #100	; 0x64
 800255c:	f200 8101 	bhi.w	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	039b      	lsls	r3, r3, #14
 8002564:	d4f6      	bmi.n	8002554 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	079f      	lsls	r7, r3, #30
 800256a:	d528      	bpl.n	80025be <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800256c:	4a85      	ldr	r2, [pc, #532]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 800256e:	6891      	ldr	r1, [r2, #8]
 8002570:	f011 0f0c 	tst.w	r1, #12
 8002574:	f000 8090 	beq.w	8002698 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002578:	6891      	ldr	r1, [r2, #8]
 800257a:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	2908      	cmp	r1, #8
 8002580:	f000 8086 	beq.w	8002690 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002584:	68e3      	ldr	r3, [r4, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 810e 	beq.w	80027a8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b7e      	ldr	r3, [pc, #504]	; (8002788 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	4e7d      	ldr	r6, [pc, #500]	; (8002784 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002594:	f7fe fd68 	bl	8001068 <HAL_GetTick>
 8002598:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	e005      	b.n	80025a8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f7fe fd64 	bl	8001068 <HAL_GetTick>
 80025a0:	1b40      	subs	r0, r0, r5
 80025a2:	2802      	cmp	r0, #2
 80025a4:	f200 80dd 	bhi.w	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	0798      	lsls	r0, r3, #30
 80025ac:	d5f6      	bpl.n	800259c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	6833      	ldr	r3, [r6, #0]
 80025b0:	6922      	ldr	r2, [r4, #16]
 80025b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025b6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80025ba:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	071a      	lsls	r2, r3, #28
 80025c0:	d451      	bmi.n	8002666 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c2:	0758      	lsls	r0, r3, #29
 80025c4:	d52f      	bpl.n	8002626 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4a6f      	ldr	r2, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 80025c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80025ca:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80025ce:	d07f      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80025d0:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d2:	4e6e      	ldr	r6, [pc, #440]	; (800278c <HAL_RCC_OscConfig+0x298>)
 80025d4:	6833      	ldr	r3, [r6, #0]
 80025d6:	05d9      	lsls	r1, r3, #23
 80025d8:	f140 80b3 	bpl.w	8002742 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025dc:	68a3      	ldr	r3, [r4, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	f000 80c3 	beq.w	800276a <HAL_RCC_OscConfig+0x276>
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	f000 812c 	beq.w	8002842 <HAL_RCC_OscConfig+0x34e>
 80025ea:	4e66      	ldr	r6, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 80025ec:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	6732      	str	r2, [r6, #112]	; 0x70
 80025f4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 80b9 	bne.w	8002774 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7fe fd31 	bl	8001068 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800260a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260c:	e005      	b.n	800261a <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260e:	f7fe fd2b 	bl	8001068 <HAL_GetTick>
 8002612:	1bc0      	subs	r0, r0, r7
 8002614:	4540      	cmp	r0, r8
 8002616:	f200 80a4 	bhi.w	8002762 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800261c:	0798      	lsls	r0, r3, #30
 800261e:	d4f6      	bmi.n	800260e <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002620:	2d00      	cmp	r5, #0
 8002622:	f040 8106 	bne.w	8002832 <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002626:	69a0      	ldr	r0, [r4, #24]
 8002628:	b1c8      	cbz	r0, 800265e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800262a:	4d56      	ldr	r5, [pc, #344]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 800262c:	68ab      	ldr	r3, [r5, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	f000 80c9 	beq.w	80027ca <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <HAL_RCC_OscConfig+0x294>)
 800263a:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800263c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800263e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002640:	f000 8109 	beq.w	8002856 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fd10 	bl	8001068 <HAL_GetTick>
 8002648:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	e005      	b.n	8002658 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe fd0c 	bl	8001068 <HAL_GetTick>
 8002650:	1b00      	subs	r0, r0, r4
 8002652:	2802      	cmp	r0, #2
 8002654:	f200 8085 	bhi.w	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	d4f6      	bmi.n	800264c <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800265e:	2000      	movs	r0, #0
}
 8002660:	b002      	add	sp, #8
 8002662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002666:	6963      	ldr	r3, [r4, #20]
 8002668:	b30b      	cbz	r3, 80026ae <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266c:	4e45      	ldr	r6, [pc, #276]	; (8002784 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800266e:	2201      	movs	r2, #1
 8002670:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002674:	f7fe fcf8 	bl	8001068 <HAL_GetTick>
 8002678:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	e004      	b.n	8002686 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800267c:	f7fe fcf4 	bl	8001068 <HAL_GetTick>
 8002680:	1b40      	subs	r0, r0, r5
 8002682:	2802      	cmp	r0, #2
 8002684:	d86d      	bhi.n	8002762 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002688:	079b      	lsls	r3, r3, #30
 800268a:	d5f7      	bpl.n	800267c <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	e798      	b.n	80025c2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002690:	6852      	ldr	r2, [r2, #4]
 8002692:	0256      	lsls	r6, r2, #9
 8002694:	f53f af76 	bmi.w	8002584 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002698:	4a3a      	ldr	r2, [pc, #232]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	0795      	lsls	r5, r2, #30
 800269e:	d544      	bpl.n	800272a <HAL_RCC_OscConfig+0x236>
 80026a0:	68e2      	ldr	r2, [r4, #12]
 80026a2:	2a01      	cmp	r2, #1
 80026a4:	d041      	beq.n	800272a <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80026a6:	2001      	movs	r0, #1
}
 80026a8:	b002      	add	sp, #8
 80026aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80026ae:	4a36      	ldr	r2, [pc, #216]	; (8002788 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b0:	4e34      	ldr	r6, [pc, #208]	; (8002784 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80026b2:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80026b6:	f7fe fcd7 	bl	8001068 <HAL_GetTick>
 80026ba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e004      	b.n	80026c8 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fcd3 	bl	8001068 <HAL_GetTick>
 80026c2:	1b40      	subs	r0, r0, r5
 80026c4:	2802      	cmp	r0, #2
 80026c6:	d84c      	bhi.n	8002762 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80026ca:	079f      	lsls	r7, r3, #30
 80026cc:	d4f7      	bmi.n	80026be <HAL_RCC_OscConfig+0x1ca>
 80026ce:	e7dd      	b.n	800268c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026e4:	2501      	movs	r5, #1
 80026e6:	e774      	b.n	80025d2 <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026e8:	684a      	ldr	r2, [r1, #4]
 80026ea:	0250      	lsls	r0, r2, #9
 80026ec:	f57f af19 	bpl.w	8002522 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	0391      	lsls	r1, r2, #14
 80026f6:	f57f af37 	bpl.w	8002568 <HAL_RCC_OscConfig+0x74>
 80026fa:	6862      	ldr	r2, [r4, #4]
 80026fc:	2a00      	cmp	r2, #0
 80026fe:	f47f af33 	bne.w	8002568 <HAL_RCC_OscConfig+0x74>
 8002702:	e7d0      	b.n	80026a6 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002704:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 8002706:	6813      	ldr	r3, [r2, #0]
 8002708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800270c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800270e:	f7fe fcab 	bl	8001068 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4e1c      	ldr	r6, [pc, #112]	; (8002784 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8002714:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	e004      	b.n	8002722 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe fca6 	bl	8001068 <HAL_GetTick>
 800271c:	1b40      	subs	r0, r0, r5
 800271e:	2864      	cmp	r0, #100	; 0x64
 8002720:	d81f      	bhi.n	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	6833      	ldr	r3, [r6, #0]
 8002724:	039a      	lsls	r2, r3, #14
 8002726:	d5f7      	bpl.n	8002718 <HAL_RCC_OscConfig+0x224>
 8002728:	e71d      	b.n	8002566 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 800272c:	6920      	ldr	r0, [r4, #16]
 800272e:	680a      	ldr	r2, [r1, #0]
 8002730:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002734:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002738:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273a:	071a      	lsls	r2, r3, #28
 800273c:	f57f af41 	bpl.w	80025c2 <HAL_RCC_OscConfig+0xce>
 8002740:	e791      	b.n	8002666 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	6833      	ldr	r3, [r6, #0]
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800274a:	f7fe fc8d 	bl	8001068 <HAL_GetTick>
 800274e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	6833      	ldr	r3, [r6, #0]
 8002752:	05da      	lsls	r2, r3, #23
 8002754:	f53f af42 	bmi.w	80025dc <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002758:	f7fe fc86 	bl	8001068 <HAL_GetTick>
 800275c:	1bc0      	subs	r0, r0, r7
 800275e:	2802      	cmp	r0, #2
 8002760:	d9f6      	bls.n	8002750 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8002762:	2003      	movs	r0, #3
}
 8002764:	b002      	add	sp, #8
 8002766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276a:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_RCC_OscConfig+0x290>)
 800276c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002774:	f7fe fc78 	bl	8001068 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	4f02      	ldr	r7, [pc, #8]	; (8002784 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800277a:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002780:	e00b      	b.n	800279a <HAL_RCC_OscConfig+0x2a6>
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	42470000 	.word	0x42470000
 800278c:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fc6a 	bl	8001068 <HAL_GetTick>
 8002794:	1b80      	subs	r0, r0, r6
 8002796:	4540      	cmp	r0, r8
 8002798:	d8e3      	bhi.n	8002762 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800279c:	079b      	lsls	r3, r3, #30
 800279e:	d5f7      	bpl.n	8002790 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80027a0:	2d00      	cmp	r5, #0
 80027a2:	f43f af40 	beq.w	8002626 <HAL_RCC_OscConfig+0x132>
 80027a6:	e044      	b.n	8002832 <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80027a8:	4a42      	ldr	r2, [pc, #264]	; (80028b4 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4e43      	ldr	r6, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80027ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027ae:	f7fe fc5b 	bl	8001068 <HAL_GetTick>
 80027b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b4:	e004      	b.n	80027c0 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fc57 	bl	8001068 <HAL_GetTick>
 80027ba:	1b40      	subs	r0, r0, r5
 80027bc:	2802      	cmp	r0, #2
 80027be:	d8d0      	bhi.n	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c0:	6833      	ldr	r3, [r6, #0]
 80027c2:	0799      	lsls	r1, r3, #30
 80027c4:	d4f7      	bmi.n	80027b6 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	e6f9      	b.n	80025be <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ca:	2801      	cmp	r0, #1
 80027cc:	f43f af48 	beq.w	8002660 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80027d0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d8:	4291      	cmp	r1, r2
 80027da:	f47f af64 	bne.w	80026a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e0:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e4:	4291      	cmp	r1, r2
 80027e6:	f47f af5e 	bne.w	80026a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027ec:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80027f0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80027f6:	f47f af56 	bne.w	80026a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027fc:	0852      	lsrs	r2, r2, #1
 80027fe:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002802:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002804:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002808:	f47f af4d 	bne.w	80026a6 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800280c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800280e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002812:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8002816:	bf14      	ite	ne
 8002818:	2001      	movne	r0, #1
 800281a:	2000      	moveq	r0, #0
 800281c:	e720      	b.n	8002660 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_OscConfig+0x3c4>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800282e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002830:	e76d      	b.n	800270e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4a21      	ldr	r2, [pc, #132]	; (80028b8 <HAL_RCC_OscConfig+0x3c4>)
 8002834:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283a:	6413      	str	r3, [r2, #64]	; 0x40
 800283c:	e6f3      	b.n	8002626 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 800283e:	2001      	movs	r0, #1
}
 8002840:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCC_OscConfig+0x3c4>)
 8002844:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002846:	f042 0204 	orr.w	r2, r2, #4
 800284a:	671a      	str	r2, [r3, #112]	; 0x70
 800284c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002854:	e78e      	b.n	8002774 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8002856:	f7fe fc07 	bl	8001068 <HAL_GetTick>
 800285a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285c:	e005      	b.n	800286a <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fc03 	bl	8001068 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2802      	cmp	r0, #2
 8002866:	f63f af7c 	bhi.w	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	682b      	ldr	r3, [r5, #0]
 800286c:	0199      	lsls	r1, r3, #6
 800286e:	d4f6      	bmi.n	800285e <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002870:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002874:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002876:	430b      	orrs	r3, r1
 8002878:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800287c:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002880:	0852      	lsrs	r2, r2, #1
 8002882:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002886:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002888:	490a      	ldr	r1, [pc, #40]	; (80028b4 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800288e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002890:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002892:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002894:	f7fe fbe8 	bl	8001068 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	4d07      	ldr	r5, [pc, #28]	; (80028b8 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 800289a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	e005      	b.n	80028aa <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fbe3 	bl	8001068 <HAL_GetTick>
 80028a2:	1b00      	subs	r0, r0, r4
 80028a4:	2802      	cmp	r0, #2
 80028a6:	f63f af5c 	bhi.w	8002762 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	682b      	ldr	r3, [r5, #0]
 80028ac:	019a      	lsls	r2, r3, #6
 80028ae:	d5f6      	bpl.n	800289e <HAL_RCC_OscConfig+0x3aa>
 80028b0:	e6d5      	b.n	800265e <HAL_RCC_OscConfig+0x16a>
 80028b2:	bf00      	nop
 80028b4:	42470000 	.word	0x42470000
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028bc:	4916      	ldr	r1, [pc, #88]	; (8002918 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80028be:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c0:	688b      	ldr	r3, [r1, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d01b      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x46>
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d117      	bne.n	80028fe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028dc:	d113      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028de:	480f      	ldr	r0, [pc, #60]	; (800291c <HAL_RCC_GetSysClockFreq+0x60>)
 80028e0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80028e4:	fba1 0100 	umull	r0, r1, r1, r0
 80028e8:	f7fd fc74 	bl	80001d4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_GetSysClockFreq+0x5c>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80028f4:	3301      	adds	r3, #1
 80028f6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80028f8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028fc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80028fe:	4807      	ldr	r0, [pc, #28]	; (800291c <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002900:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002902:	4807      	ldr	r0, [pc, #28]	; (8002920 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002904:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4806      	ldr	r0, [pc, #24]	; (8002920 <HAL_RCC_GetSysClockFreq+0x64>)
 8002908:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800290c:	2300      	movs	r3, #0
 800290e:	fba1 0100 	umull	r0, r1, r1, r0
 8002912:	f7fd fc5f 	bl	80001d4 <__aeabi_uldivmod>
 8002916:	e7e9      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x30>
 8002918:	40023800 	.word	0x40023800
 800291c:	00f42400 	.word	0x00f42400
 8002920:	007a1200 	.word	0x007a1200

08002924 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002924:	2800      	cmp	r0, #0
 8002926:	f000 8087 	beq.w	8002a38 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800292a:	4a48      	ldr	r2, [pc, #288]	; (8002a4c <HAL_RCC_ClockConfig+0x128>)
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	428b      	cmp	r3, r1
{
 8002934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002938:	460d      	mov	r5, r1
 800293a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	d209      	bcs.n	8002952 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	b2cb      	uxtb	r3, r1
 8002940:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	6813      	ldr	r3, [r2, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	428b      	cmp	r3, r1
 800294a:	d002      	beq.n	8002952 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
}
 800294e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	0798      	lsls	r0, r3, #30
 8002956:	d514      	bpl.n	8002982 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	0759      	lsls	r1, r3, #29
 800295a:	d504      	bpl.n	8002966 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	493c      	ldr	r1, [pc, #240]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 800295e:	688a      	ldr	r2, [r1, #8]
 8002960:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002964:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	071a      	lsls	r2, r3, #28
 8002968:	d504      	bpl.n	8002974 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800296a:	4939      	ldr	r1, [pc, #228]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 800296c:	688a      	ldr	r2, [r1, #8]
 800296e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002972:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002974:	4936      	ldr	r1, [pc, #216]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 8002976:	68a0      	ldr	r0, [r4, #8]
 8002978:	688a      	ldr	r2, [r1, #8]
 800297a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800297e:	4302      	orrs	r2, r0
 8002980:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002982:	07df      	lsls	r7, r3, #31
 8002984:	d521      	bpl.n	80029ca <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002986:	6862      	ldr	r2, [r4, #4]
 8002988:	2a01      	cmp	r2, #1
 800298a:	d057      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800298c:	1e93      	subs	r3, r2, #2
 800298e:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002990:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 8002992:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002994:	d94d      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	0799      	lsls	r1, r3, #30
 8002998:	d5d8      	bpl.n	800294c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4e2d      	ldr	r6, [pc, #180]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 800299c:	68b3      	ldr	r3, [r6, #8]
 800299e:	f023 0303 	bic.w	r3, r3, #3
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80029a6:	f7fe fb5f 	bl	8001068 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80029ae:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b0:	e004      	b.n	80029bc <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b2:	f7fe fb59 	bl	8001068 <HAL_GetTick>
 80029b6:	1bc0      	subs	r0, r0, r7
 80029b8:	4540      	cmp	r0, r8
 80029ba:	d844      	bhi.n	8002a46 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029bc:	68b3      	ldr	r3, [r6, #8]
 80029be:	6862      	ldr	r2, [r4, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80029c8:	d1f3      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x128>)
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	42ab      	cmp	r3, r5
 80029d4:	d906      	bls.n	80029e4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	b2eb      	uxtb	r3, r5
 80029d8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	6813      	ldr	r3, [r2, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	42ab      	cmp	r3, r5
 80029e2:	d1b3      	bne.n	800294c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	075a      	lsls	r2, r3, #29
 80029e8:	d506      	bpl.n	80029f8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ea:	4919      	ldr	r1, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 80029ec:	68e0      	ldr	r0, [r4, #12]
 80029ee:	688a      	ldr	r2, [r1, #8]
 80029f0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80029f4:	4302      	orrs	r2, r0
 80029f6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	071b      	lsls	r3, r3, #28
 80029fa:	d507      	bpl.n	8002a0c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 80029fe:	6921      	ldr	r1, [r4, #16]
 8002a00:	6893      	ldr	r3, [r2, #8]
 8002a02:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002a06:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a0a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a0c:	f7ff ff56 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 8002a12:	4c10      	ldr	r4, [pc, #64]	; (8002a54 <HAL_RCC_ClockConfig+0x130>)
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	4910      	ldr	r1, [pc, #64]	; (8002a58 <HAL_RCC_ClockConfig+0x134>)
 8002a18:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002a20:	480e      	ldr	r0, [pc, #56]	; (8002a5c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a22:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8002a24:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a26:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8002a28:	f7fe fad4 	bl	8000fd4 <HAL_InitTick>
  return HAL_OK;
 8002a2c:	2000      	movs	r0, #0
}
 8002a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	0198      	lsls	r0, r3, #6
 8002a34:	d4b1      	bmi.n	800299a <HAL_RCC_ClockConfig+0x76>
 8002a36:	e789      	b.n	800294c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002a38:	2001      	movs	r0, #1
}
 8002a3a:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3c:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_RCC_ClockConfig+0x12c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	039e      	lsls	r6, r3, #14
 8002a42:	d4aa      	bmi.n	800299a <HAL_RCC_ClockConfig+0x76>
 8002a44:	e782      	b.n	800294c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002a46:	2003      	movs	r0, #3
 8002a48:	e781      	b.n	800294e <HAL_RCC_ClockConfig+0x2a>
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08003728 	.word	0x08003728
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000008 	.word	0x20000008

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a60:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002a62:	4905      	ldr	r1, [pc, #20]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a68:	6808      	ldr	r0, [r1, #0]
 8002a6a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002a6e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a70:	40d8      	lsrs	r0, r3
 8002a72:	4770      	bx	lr
 8002a74:	40023800 	.word	0x40023800
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	08003738 	.word	0x08003738

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002a82:	4905      	ldr	r1, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a88:	6808      	ldr	r0, [r1, #0]
 8002a8a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002a90:	40d8      	lsrs	r0, r3
 8002a92:	4770      	bx	lr
 8002a94:	40023800 	.word	0x40023800
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	08003738 	.word	0x08003738

08002aa0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d127      	bne.n	8002af8 <HAL_TIM_Base_Start_IT+0x58>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aa8:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aaa:	4915      	ldr	r1, [pc, #84]	; (8002b00 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002aac:	2202      	movs	r2, #2
 8002aae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ab4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	d011      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x42>
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x42>
 8002ac4:	4a0f      	ldr	r2, [pc, #60]	; (8002b04 <HAL_TIM_Base_Start_IT+0x64>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x42>
 8002aca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x42>
 8002ad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_Base_Start_IT+0x42>
 8002ada:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d104      	bne.n	8002aec <HAL_TIM_Base_Start_IT+0x4c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	2a06      	cmp	r2, #6
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	4770      	bx	lr
    return HAL_ERROR;
 8002af8:	2001      	movs	r0, #1
 8002afa:	4770      	bx	lr
  return HAL_OK;
 8002afc:	2000      	movs	r0, #0
}
 8002afe:	4770      	bx	lr
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40000400 	.word	0x40000400

08002b08 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b08:	6803      	ldr	r3, [r0, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	f022 0201 	bic.w	r2, r2, #1
 8002b10:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	f241 1111 	movw	r1, #4369	; 0x1111
 8002b18:	420a      	tst	r2, r1
 8002b1a:	d108      	bne.n	8002b2e <HAL_TIM_Base_Stop_IT+0x26>
 8002b1c:	6a19      	ldr	r1, [r3, #32]
 8002b1e:	f240 4244 	movw	r2, #1092	; 0x444
 8002b22:	4211      	tst	r1, r2
 8002b24:	d103      	bne.n	8002b2e <HAL_TIM_Base_Stop_IT+0x26>
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	f022 0201 	bic.w	r2, r2, #1
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002b34:	2000      	movs	r0, #0
 8002b36:	4770      	bx	lr

08002b38 <HAL_TIM_ConfigClockSource>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d075      	beq.n	8002c2c <HAL_TIM_ConfigClockSource+0xf4>
 8002b40:	4602      	mov	r2, r0
{
 8002b42:	b430      	push	{r4, r5}

  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	2302      	movs	r3, #2

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b46:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b48:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002b52:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002b5c:	60a3      	str	r3, [r4, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b5e:	680b      	ldr	r3, [r1, #0]
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d065      	beq.n	8002c30 <HAL_TIM_ConfigClockSource+0xf8>
 8002b64:	d824      	bhi.n	8002bb0 <HAL_TIM_ConfigClockSource+0x78>
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d07c      	beq.n	8002c64 <HAL_TIM_ConfigClockSource+0x12c>
 8002b6a:	d94b      	bls.n	8002c04 <HAL_TIM_ConfigClockSource+0xcc>
 8002b6c:	2b50      	cmp	r3, #80	; 0x50
 8002b6e:	d117      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b70:	6848      	ldr	r0, [r1, #4]
 8002b72:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b74:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b76:	6a23      	ldr	r3, [r4, #32]
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b7e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b80:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002b88:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b8a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002b90:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b92:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b98:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8002b9c:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002ba0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8002ba2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002ba8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8002bac:	bc30      	pop	{r4, r5}
 8002bae:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8002bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb4:	d038      	beq.n	8002c28 <HAL_TIM_ConfigClockSource+0xf0>
 8002bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bba:	d110      	bne.n	8002bde <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bbc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002bc0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bc2:	432b      	orrs	r3, r5
 8002bc4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002bce:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bd0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd2:	68a3      	ldr	r3, [r4, #8]
 8002bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8002bd8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bda:	60a3      	str	r3, [r4, #8]
      break;
 8002bdc:	e7e0      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002bde:	2b70      	cmp	r3, #112	; 0x70
 8002be0:	d1de      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002be6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002be8:	432b      	orrs	r3, r5
 8002bea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bec:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bf0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002bf4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002bf6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002bf8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8002c00:	60a3      	str	r3, [r4, #8]
      break;
 8002c02:	e7cd      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d002      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xd6>
 8002c08:	d90a      	bls.n	8002c20 <HAL_TIM_ConfigClockSource+0xe8>
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d1c8      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8002c0e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c10:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c14:	430b      	orrs	r3, r1
 8002c16:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002c1c:	60a3      	str	r3, [r4, #8]
}
 8002c1e:	e7bf      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002c20:	f033 0110 	bics.w	r1, r3, #16
 8002c24:	d1bc      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
 8002c26:	e7f2      	b.n	8002c0e <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2000      	movs	r0, #0
 8002c2a:	e7b9      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002c2c:	2002      	movs	r0, #2
}
 8002c2e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c30:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c32:	68cb      	ldr	r3, [r1, #12]
 8002c34:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c36:	f020 0010 	bic.w	r0, r0, #16
 8002c3a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c3c:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c3e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c42:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8002c46:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002c48:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c4e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8002c52:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002c54:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c5a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002c60:	60a3      	str	r3, [r4, #8]
}
 8002c62:	e79d      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c64:	6848      	ldr	r0, [r1, #4]
 8002c66:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002c68:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	6a23      	ldr	r3, [r4, #32]
 8002c6c:	f023 0301 	bic.w	r3, r3, #1
 8002c70:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c74:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002c7c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c7e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002c82:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002c84:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8002c86:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c8c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002c92:	60a3      	str	r3, [r4, #8]
}
 8002c94:	e784      	b.n	8002ba0 <HAL_TIM_ConfigClockSource+0x68>
 8002c96:	bf00      	nop

08002c98 <HAL_TIM_OC_DelayElapsedCallback>:
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <HAL_TIM_IC_CaptureCallback>:
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop

08002ca0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop

08002ca4 <HAL_TIM_TriggerCallback>:
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop

08002ca8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ca8:	6803      	ldr	r3, [r0, #0]
 8002caa:	691a      	ldr	r2, [r3, #16]
 8002cac:	0791      	lsls	r1, r2, #30
{
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cb2:	d502      	bpl.n	8002cba <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	0792      	lsls	r2, r2, #30
 8002cb8:	d45f      	bmi.n	8002d7a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	0750      	lsls	r0, r2, #29
 8002cbe:	d502      	bpl.n	8002cc6 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	0751      	lsls	r1, r2, #29
 8002cc4:	d446      	bmi.n	8002d54 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	0712      	lsls	r2, r2, #28
 8002cca:	d502      	bpl.n	8002cd2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	0710      	lsls	r0, r2, #28
 8002cd0:	d42e      	bmi.n	8002d30 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	06d2      	lsls	r2, r2, #27
 8002cd6:	d502      	bpl.n	8002cde <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	06d0      	lsls	r0, r2, #27
 8002cdc:	d418      	bmi.n	8002d10 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	07d1      	lsls	r1, r2, #31
 8002ce2:	d502      	bpl.n	8002cea <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	07d2      	lsls	r2, r2, #31
 8002ce8:	d45d      	bmi.n	8002da6 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	0610      	lsls	r0, r2, #24
 8002cee:	d502      	bpl.n	8002cf6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	0611      	lsls	r1, r2, #24
 8002cf4:	d45f      	bmi.n	8002db6 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	0652      	lsls	r2, r2, #25
 8002cfa:	d502      	bpl.n	8002d02 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	0650      	lsls	r0, r2, #25
 8002d00:	d461      	bmi.n	8002dc6 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	0691      	lsls	r1, r2, #26
 8002d06:	d502      	bpl.n	8002d0e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	0692      	lsls	r2, r2, #26
 8002d0c:	d443      	bmi.n	8002d96 <HAL_TIM_IRQHandler+0xee>
}
 8002d0e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d10:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d14:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d16:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d18:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d20:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d22:	d064      	beq.n	8002dee <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d24:	f7ff ffba 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d28:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d2a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d2c:	7722      	strb	r2, [r4, #28]
 8002d2e:	e7d6      	b.n	8002cde <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d30:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d34:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d36:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d38:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d40:	d152      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	f7ff ffa9 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff ffaa 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d4e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d50:	7722      	strb	r2, [r4, #28]
 8002d52:	e7be      	b.n	8002cd2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d54:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d58:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d5a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d5c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d66:	d13c      	bne.n	8002de2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d68:	f7ff ff96 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	f7ff ff97 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d74:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	7722      	strb	r2, [r4, #28]
 8002d78:	e7a5      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d7a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d7e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d80:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d82:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	079b      	lsls	r3, r3, #30
 8002d88:	d025      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	f7ff ff87 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d90:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d92:	7722      	strb	r2, [r4, #28]
 8002d94:	e791      	b.n	8002cba <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d96:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8002d9a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d9c:	611a      	str	r2, [r3, #16]
}
 8002d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002da2:	f000 b8e9 	b.w	8002f78 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002da6:	f06f 0201 	mvn.w	r2, #1
 8002daa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7fd ff6d 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	e799      	b.n	8002cea <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002dba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f000 f8dd 	bl	8002f7c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	e797      	b.n	8002cf6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7ff ff69 	bl	8002ca4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	e795      	b.n	8002d02 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	f7ff ff5f 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff ff60 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002de0:	e7d5      	b.n	8002d8e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8002de2:	f7ff ff5b 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
 8002de6:	e7c4      	b.n	8002d72 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8002de8:	f7ff ff58 	bl	8002c9c <HAL_TIM_IC_CaptureCallback>
 8002dec:	e7ae      	b.n	8002d4c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	f7ff ff53 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7ff ff54 	bl	8002ca0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002df8:	e796      	b.n	8002d28 <HAL_TIM_IRQHandler+0x80>
 8002dfa:	bf00      	nop

08002dfc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 8002dfe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e00:	4290      	cmp	r0, r2
{
 8002e02:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e04:	d039      	beq.n	8002e7a <TIM_Base_SetConfig+0x7e>
 8002e06:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e0a:	d021      	beq.n	8002e50 <TIM_Base_SetConfig+0x54>
 8002e0c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e10:	4290      	cmp	r0, r2
 8002e12:	d01d      	beq.n	8002e50 <TIM_Base_SetConfig+0x54>
 8002e14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e18:	4290      	cmp	r0, r2
 8002e1a:	d019      	beq.n	8002e50 <TIM_Base_SetConfig+0x54>
 8002e1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e20:	4290      	cmp	r0, r2
 8002e22:	d015      	beq.n	8002e50 <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e24:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002e28:	4290      	cmp	r0, r2
 8002e2a:	d015      	beq.n	8002e58 <TIM_Base_SetConfig+0x5c>
 8002e2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e30:	4290      	cmp	r0, r2
 8002e32:	d011      	beq.n	8002e58 <TIM_Base_SetConfig+0x5c>
 8002e34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e38:	4290      	cmp	r0, r2
 8002e3a:	d00d      	beq.n	8002e58 <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e3c:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3e:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8002e40:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e46:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002e48:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e4a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e4c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e4e:	e010      	b.n	8002e72 <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8002e50:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e56:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e58:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e60:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e66:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e68:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8002e6a:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8002e6c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e6e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e70:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002e72:	2301      	movs	r3, #1
}
 8002e74:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8002e76:	6143      	str	r3, [r0, #20]
}
 8002e78:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8002e7a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e82:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e88:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e8a:	694a      	ldr	r2, [r1, #20]
 8002e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e90:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002e92:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	688b      	ldr	r3, [r1, #8]
 8002e96:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e98:	680b      	ldr	r3, [r1, #0]
 8002e9a:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002e9c:	690b      	ldr	r3, [r1, #16]
 8002e9e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 8002ea4:	6143      	str	r3, [r0, #20]
}
 8002ea6:	4770      	bx	lr
 8002ea8:	40010000 	.word	0x40010000

08002eac <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002eac:	b350      	cbz	r0, 8002f04 <HAL_TIM_Base_Init+0x58>
{
 8002eae:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002eba:	b1f3      	cbz	r3, 8002efa <HAL_TIM_Base_Init+0x4e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ebc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec4:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ec8:	f7ff ff98 	bl	8002dfc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ed6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002eda:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002eee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002ef6:	2000      	movs	r0, #0
}
 8002ef8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002efa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002efe:	f7fd ff59 	bl	8000db4 <HAL_TIM_Base_MspInit>
 8002f02:	e7db      	b.n	8002ebc <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
}
 8002f06:	4770      	bx	lr

08002f08 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d02f      	beq.n	8002f70 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f10:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f12:	2202      	movs	r2, #2
{
 8002f14:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002f16:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002f1a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f1c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002f1e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f24:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f28:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d012      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f32:	d00f      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f34:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d00b      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f3c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d007      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d003      	beq.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f4c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d104      	bne.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f54:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f56:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002f5e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8002f60:	2201      	movs	r2, #1
 8002f62:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002f66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8002f6a:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8002f6c:	4618      	mov	r0, r3
}
 8002f6e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002f70:	2002      	movs	r0, #2
}
 8002f72:	4770      	bx	lr
 8002f74:	40010000 	.word	0x40010000

08002f78 <HAL_TIMEx_CommutCallback>:
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop

08002f7c <HAL_TIMEx_BreakCallback>:
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop

08002f80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f80:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	f102 030c 	add.w	r3, r2, #12
 8002f86:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	f102 0c0c 	add.w	ip, r2, #12
 8002f92:	e84c 3100 	strex	r1, r3, [ip]
 8002f96:	2900      	cmp	r1, #0
 8002f98:	d1f3      	bne.n	8002f82 <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9a:	f102 0314 	add.w	r3, r2, #20
 8002f9e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f102 0c14 	add.w	ip, r2, #20
 8002faa:	e84c 3100 	strex	r1, r3, [ip]
 8002fae:	2900      	cmp	r1, #0
 8002fb0:	d1f3      	bne.n	8002f9a <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d005      	beq.n	8002fc4 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb8:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fba:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc0:	6303      	str	r3, [r0, #48]	; 0x30
}
 8002fc2:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc4:	f102 030c 	add.w	r3, r2, #12
 8002fc8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fcc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd0:	f102 0c0c 	add.w	ip, r2, #12
 8002fd4:	e84c 3100 	strex	r1, r3, [ip]
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d1f3      	bne.n	8002fc4 <UART_EndRxTransfer+0x44>
 8002fdc:	e7ec      	b.n	8002fb8 <UART_EndRxTransfer+0x38>
 8002fde:	bf00      	nop

08002fe0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe0:	6802      	ldr	r2, [r0, #0]
 8002fe2:	6911      	ldr	r1, [r2, #16]
{
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe8:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fea:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fec:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002ff0:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ff2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff4:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ff6:	4303      	orrs	r3, r0
 8002ff8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002ffa:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ffc:	4303      	orrs	r3, r0
 8002ffe:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003000:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003004:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003008:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800300a:	430b      	orrs	r3, r1
 800300c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800300e:	6953      	ldr	r3, [r2, #20]
 8003010:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003012:	4928      	ldr	r1, [pc, #160]	; (80030b4 <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003018:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800301a:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800301c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800301e:	d029      	beq.n	8003074 <UART_SetConfig+0x94>
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <UART_SetConfig+0xd8>)
 8003022:	429a      	cmp	r2, r3
 8003024:	d026      	beq.n	8003074 <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003026:	f7ff fd1b 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	69e3      	ldr	r3, [r4, #28]
 800302c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003030:	d126      	bne.n	8003080 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003032:	6862      	ldr	r2, [r4, #4]
 8003034:	4d21      	ldr	r5, [pc, #132]	; (80030bc <UART_SetConfig+0xdc>)
 8003036:	1892      	adds	r2, r2, r2
 8003038:	f04f 0119 	mov.w	r1, #25
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	415b      	adcs	r3, r3
 8003042:	fba0 0101 	umull	r0, r1, r0, r1
 8003046:	f7fd f8c5 	bl	80001d4 <__aeabi_uldivmod>
 800304a:	fba5 3200 	umull	r3, r2, r5, r0
 800304e:	0951      	lsrs	r1, r2, #5
 8003050:	2364      	movs	r3, #100	; 0x64
 8003052:	fb03 0311 	mls	r3, r3, r1, r0
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	fba5 2303 	umull	r2, r3, r5, r3
 800305e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003062:	091b      	lsrs	r3, r3, #4
 8003064:	6824      	ldr	r4, [r4, #0]
 8003066:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800306a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800306e:	4413      	add	r3, r2
 8003070:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003072:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003074:	f7ff fd04 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003078:	69e3      	ldr	r3, [r4, #28]
 800307a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307e:	d0d8      	beq.n	8003032 <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003080:	6863      	ldr	r3, [r4, #4]
 8003082:	2119      	movs	r1, #25
 8003084:	009a      	lsls	r2, r3, #2
 8003086:	fba0 0101 	umull	r0, r1, r0, r1
 800308a:	0f9b      	lsrs	r3, r3, #30
 800308c:	f7fd f8a2 	bl	80001d4 <__aeabi_uldivmod>
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <UART_SetConfig+0xdc>)
 8003092:	fba2 1300 	umull	r1, r3, r2, r0
 8003096:	095b      	lsrs	r3, r3, #5
 8003098:	6821      	ldr	r1, [r4, #0]
 800309a:	2464      	movs	r4, #100	; 0x64
 800309c:	fb04 0013 	mls	r0, r4, r3, r0
 80030a0:	0100      	lsls	r0, r0, #4
 80030a2:	3032      	adds	r0, #50	; 0x32
 80030a4:	fba2 2000 	umull	r2, r0, r2, r0
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 80030ae:	6088      	str	r0, [r1, #8]
}
 80030b0:	bd38      	pop	{r3, r4, r5, pc}
 80030b2:	bf00      	nop
 80030b4:	40011000 	.word	0x40011000
 80030b8:	40011400 	.word	0x40011400
 80030bc:	51eb851f 	.word	0x51eb851f

080030c0 <HAL_UART_Init>:
  if (huart == NULL)
 80030c0:	b360      	cbz	r0, 800311c <HAL_UART_Init+0x5c>
{
 80030c2:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80030c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030c8:	4604      	mov	r4, r0
 80030ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030ce:	b303      	cbz	r3, 8003112 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 80030d0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80030d2:	2324      	movs	r3, #36	; 0x24
 80030d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80030d8:	68d3      	ldr	r3, [r2, #12]
 80030da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  UART_SetConfig(huart);
 80030de:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80030e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80030e2:	f7ff ff7d 	bl	8002fe0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030f6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80030f8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80030fc:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80030fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003102:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003104:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003106:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800310a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800310e:	4628      	mov	r0, r5
}
 8003110:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8003112:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003116:	f7fd fe6d 	bl	8000df4 <HAL_UART_MspInit>
 800311a:	e7d9      	b.n	80030d0 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800311c:	2001      	movs	r0, #1
}
 800311e:	4770      	bx	lr

08003120 <HAL_UART_TxCpltCallback>:
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <HAL_UART_ErrorCallback>:
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <UART_DMAAbortOnError>:
{
 8003128:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003130:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003132:	f7ff fff7 	bl	8003124 <HAL_UART_ErrorCallback>
}
 8003136:	bd08      	pop	{r3, pc}

08003138 <HAL_UARTEx_RxEventCallback>:
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop

0800313c <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	6883      	ldr	r3, [r0, #8]
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	d044      	beq.n	80031ce <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003144:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003146:	2b00      	cmp	r3, #0
 8003148:	d039      	beq.n	80031be <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800314a:	6803      	ldr	r3, [r0, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003152:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003154:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003156:	3301      	adds	r3, #1
 8003158:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800315a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800315c:	3b01      	subs	r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003162:	2b00      	cmp	r3, #0
 8003164:	d132      	bne.n	80031cc <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003166:	6802      	ldr	r2, [r0, #0]
 8003168:	68d1      	ldr	r1, [r2, #12]
 800316a:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800316e:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003170:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003172:	68d1      	ldr	r1, [r2, #12]
 8003174:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003178:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800317a:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800317c:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003180:	f021 0101 	bic.w	r1, r1, #1
 8003184:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003186:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800318c:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800318e:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003190:	d128      	bne.n	80031e4 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003192:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	f102 030c 	add.w	r3, r2, #12
 8003198:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	f102 0c0c 	add.w	ip, r2, #12
 80031a4:	e84c 3100 	strex	r1, r3, [ip]
 80031a8:	2900      	cmp	r1, #0
 80031aa:	d1f3      	bne.n	8003194 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	06db      	lsls	r3, r3, #27
 80031b0:	d422      	bmi.n	80031f8 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031b2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80031b4:	f7ff ffc0 	bl	8003138 <HAL_UARTEx_RxEventCallback>
}
 80031b8:	b003      	add	sp, #12
 80031ba:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031be:	6903      	ldr	r3, [r0, #16]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1c2      	bne.n	800314a <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c4:	6803      	ldr	r3, [r0, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	7013      	strb	r3, [r2, #0]
 80031ca:	e7c3      	b.n	8003154 <UART_Receive_IT.part.0.isra.0+0x18>
 80031cc:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	6903      	ldr	r3, [r0, #16]
 80031d0:	b96b      	cbnz	r3, 80031ee <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031d2:	6802      	ldr	r2, [r0, #0]
 80031d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80031d6:	6852      	ldr	r2, [r2, #4]
 80031d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031dc:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80031e0:	6283      	str	r3, [r0, #40]	; 0x28
 80031e2:	e7ba      	b.n	800315a <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80031e4:	f7fd feb6 	bl	8000f54 <HAL_UART_RxCpltCallback>
}
 80031e8:	b003      	add	sp, #12
 80031ea:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ee:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031f0:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	7013      	strb	r3, [r2, #0]
 80031f6:	e7ad      	b.n	8003154 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031f8:	9101      	str	r1, [sp, #4]
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	6853      	ldr	r3, [r2, #4]
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	9b01      	ldr	r3, [sp, #4]
 8003204:	e7d5      	b.n	80031b2 <UART_Receive_IT.part.0.isra.0+0x76>
 8003206:	bf00      	nop

08003208 <HAL_UART_IRQHandler>:
{
 8003208:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800320a:	6803      	ldr	r3, [r0, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800320e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003210:	695e      	ldr	r6, [r3, #20]
  if (errorflags == RESET)
 8003212:	f012 0f0f 	tst.w	r2, #15
{
 8003216:	b082      	sub	sp, #8
 8003218:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800321a:	461d      	mov	r5, r3
  if (errorflags == RESET)
 800321c:	d16e      	bne.n	80032fc <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800321e:	0693      	lsls	r3, r2, #26
 8003220:	d502      	bpl.n	8003228 <HAL_UART_IRQHandler+0x20>
 8003222:	068e      	lsls	r6, r1, #26
 8003224:	f100 80d4 	bmi.w	80033d0 <HAL_UART_IRQHandler+0x1c8>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800322a:	2b01      	cmp	r3, #1
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800322e:	0616      	lsls	r6, r2, #24
 8003230:	d502      	bpl.n	8003238 <HAL_UART_IRQHandler+0x30>
 8003232:	0608      	lsls	r0, r1, #24
 8003234:	f100 80a2 	bmi.w	800337c <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003238:	0652      	lsls	r2, r2, #25
 800323a:	d502      	bpl.n	8003242 <HAL_UART_IRQHandler+0x3a>
 800323c:	064b      	lsls	r3, r1, #25
 800323e:	f100 80bc 	bmi.w	80033ba <HAL_UART_IRQHandler+0x1b2>
}
 8003242:	b002      	add	sp, #8
 8003244:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003246:	06d6      	lsls	r6, r2, #27
 8003248:	d5f1      	bpl.n	800322e <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800324a:	06c8      	lsls	r0, r1, #27
 800324c:	d5ef      	bpl.n	800322e <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800324e:	2300      	movs	r3, #0
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	682b      	ldr	r3, [r5, #0]
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	686b      	ldr	r3, [r5, #4]
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	696b      	ldr	r3, [r5, #20]
 800325e:	065b      	lsls	r3, r3, #25
 8003260:	f140 80e5 	bpl.w	800342e <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003264:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003266:	6803      	ldr	r3, [r0, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0e8      	beq.n	8003242 <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003270:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003272:	429a      	cmp	r2, r3
 8003274:	d9e5      	bls.n	8003242 <HAL_UART_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 8003276:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003278:	69c3      	ldr	r3, [r0, #28]
 800327a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327e:	d036      	beq.n	80032ee <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	f105 030c 	add.w	r3, r5, #12
 8003284:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	f105 010c 	add.w	r1, r5, #12
 8003290:	e841 3200 	strex	r2, r3, [r1]
 8003294:	2a00      	cmp	r2, #0
 8003296:	d1f3      	bne.n	8003280 <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	f105 0314 	add.w	r3, r5, #20
 800329c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	f105 0114 	add.w	r1, r5, #20
 80032a8:	e841 3200 	strex	r2, r3, [r1]
 80032ac:	2a00      	cmp	r2, #0
 80032ae:	d1f3      	bne.n	8003298 <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	f105 0314 	add.w	r3, r5, #20
 80032b4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032bc:	f105 0114 	add.w	r1, r5, #20
 80032c0:	e841 3200 	strex	r2, r3, [r1]
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	d1f3      	bne.n	80032b0 <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 80032c8:	2320      	movs	r3, #32
 80032ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	f105 030c 	add.w	r3, r5, #12
 80032d4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	f105 010c 	add.w	r1, r5, #12
 80032e0:	e841 3200 	strex	r2, r3, [r1]
 80032e4:	2a00      	cmp	r2, #0
 80032e6:	d1f3      	bne.n	80032d0 <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032e8:	f7fd ff3c 	bl	8001164 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032ec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80032ee:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80032f0:	1ad2      	subs	r2, r2, r3
 80032f2:	4620      	mov	r0, r4
 80032f4:	b291      	uxth	r1, r2
 80032f6:	f7ff ff1f 	bl	8003138 <HAL_UARTEx_RxEventCallback>
 80032fa:	e7a2      	b.n	8003242 <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032fc:	f006 0601 	and.w	r6, r6, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003300:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8003304:	4330      	orrs	r0, r6
 8003306:	d08f      	beq.n	8003228 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003308:	07d0      	lsls	r0, r2, #31
 800330a:	d505      	bpl.n	8003318 <HAL_UART_IRQHandler+0x110>
 800330c:	05cd      	lsls	r5, r1, #23
 800330e:	d503      	bpl.n	8003318 <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003310:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003312:	f040 0001 	orr.w	r0, r0, #1
 8003316:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003318:	0750      	lsls	r0, r2, #29
 800331a:	d526      	bpl.n	800336a <HAL_UART_IRQHandler+0x162>
 800331c:	b12e      	cbz	r6, 800332a <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800331e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003320:	0795      	lsls	r5, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003322:	f040 0002 	orr.w	r0, r0, #2
 8003326:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003328:	d423      	bmi.n	8003372 <HAL_UART_IRQHandler+0x16a>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800332a:	0715      	lsls	r5, r2, #28
 800332c:	d507      	bpl.n	800333e <HAL_UART_IRQHandler+0x136>
 800332e:	f001 0020 	and.w	r0, r1, #32
 8003332:	4330      	orrs	r0, r6
 8003334:	d003      	beq.n	800333e <HAL_UART_IRQHandler+0x136>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003336:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003338:	f040 0008 	orr.w	r0, r0, #8
 800333c:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003340:	2800      	cmp	r0, #0
 8003342:	f43f af7e 	beq.w	8003242 <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003346:	0690      	lsls	r0, r2, #26
 8003348:	d502      	bpl.n	8003350 <HAL_UART_IRQHandler+0x148>
 800334a:	068a      	lsls	r2, r1, #26
 800334c:	f100 80a8 	bmi.w	80034a0 <HAL_UART_IRQHandler+0x298>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003350:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003352:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003358:	f005 0508 	and.w	r5, r5, #8
 800335c:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800335e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003360:	d140      	bne.n	80033e4 <HAL_UART_IRQHandler+0x1dc>
        HAL_UART_ErrorCallback(huart);
 8003362:	f7ff fedf 	bl	8003124 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	6425      	str	r5, [r4, #64]	; 0x40
 8003368:	e76b      	b.n	8003242 <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800336a:	0790      	lsls	r0, r2, #30
 800336c:	d5dd      	bpl.n	800332a <HAL_UART_IRQHandler+0x122>
 800336e:	2e00      	cmp	r6, #0
 8003370:	d0db      	beq.n	800332a <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003372:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003374:	f040 0004 	orr.w	r0, r0, #4
 8003378:	6420      	str	r0, [r4, #64]	; 0x40
 800337a:	e7d6      	b.n	800332a <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800337c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	f47f af5e 	bne.w	8003242 <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003386:	68a3      	ldr	r3, [r4, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	f000 8092 	beq.w	80034b4 <HAL_UART_IRQHandler+0x2ac>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003390:	6a23      	ldr	r3, [r4, #32]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	6222      	str	r2, [r4, #32]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	606b      	str	r3, [r5, #4]
    if (--huart->TxXferCount == 0U)
 800339a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800339c:	3b01      	subs	r3, #1
 800339e:	b29b      	uxth	r3, r3
 80033a0:	84e3      	strh	r3, [r4, #38]	; 0x26
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f47f af4d 	bne.w	8003242 <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033a8:	68eb      	ldr	r3, [r5, #12]
 80033aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ae:	60eb      	str	r3, [r5, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033b0:	68eb      	ldr	r3, [r5, #12]
 80033b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b6:	60eb      	str	r3, [r5, #12]
 80033b8:	e743      	b.n	8003242 <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ba:	68eb      	ldr	r3, [r5, #12]
  huart->gState = HAL_UART_STATE_READY;
 80033bc:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c2:	60eb      	str	r3, [r5, #12]
  HAL_UART_TxCpltCallback(huart);
 80033c4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80033c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80033ca:	f7ff fea9 	bl	8003120 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80033ce:	e738      	b.n	8003242 <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80033d4:	2b22      	cmp	r3, #34	; 0x22
 80033d6:	f47f af34 	bne.w	8003242 <HAL_UART_IRQHandler+0x3a>
}
 80033da:	b002      	add	sp, #8
 80033dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80033e0:	f7ff beac 	b.w	800313c <UART_Receive_IT.part.0.isra.0>
        UART_EndRxTransfer(huart);
 80033e4:	f7ff fdcc 	bl	8002f80 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e8:	6825      	ldr	r5, [r4, #0]
 80033ea:	696b      	ldr	r3, [r5, #20]
 80033ec:	065b      	lsls	r3, r3, #25
 80033ee:	d51a      	bpl.n	8003426 <HAL_UART_IRQHandler+0x21e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	f105 0314 	add.w	r3, r5, #20
 80033f4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	f105 0114 	add.w	r1, r5, #20
 8003400:	e841 3200 	strex	r2, r3, [r1]
 8003404:	2a00      	cmp	r2, #0
 8003406:	d1f3      	bne.n	80033f0 <HAL_UART_IRQHandler+0x1e8>
          if (huart->hdmarx != NULL)
 8003408:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800340a:	b160      	cbz	r0, 8003426 <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800340c:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_UART_IRQHandler+0x2c4>)
 800340e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003410:	f7fd fef0 	bl	80011f4 <HAL_DMA_Abort_IT>
 8003414:	2800      	cmp	r0, #0
 8003416:	f43f af14 	beq.w	8003242 <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800341a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800341c:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800341e:	b002      	add	sp, #8
 8003420:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003424:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff fe7c 	bl	8003124 <HAL_UART_ErrorCallback>
 800342c:	e709      	b.n	8003242 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800342e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8003430:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003432:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003434:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003436:	2b00      	cmp	r3, #0
 8003438:	f43f af03 	beq.w	8003242 <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800343c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800343e:	1a8a      	subs	r2, r1, r2
 8003440:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8003442:	2900      	cmp	r1, #0
 8003444:	f43f aefd 	beq.w	8003242 <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	f105 030c 	add.w	r3, r5, #12
 800344c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	f105 000c 	add.w	r0, r5, #12
 8003458:	e840 3200 	strex	r2, r3, [r0]
 800345c:	2a00      	cmp	r2, #0
 800345e:	d1f3      	bne.n	8003448 <HAL_UART_IRQHandler+0x240>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	f105 0314 	add.w	r3, r5, #20
 8003464:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003468:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	f105 0014 	add.w	r0, r5, #20
 8003470:	e840 3200 	strex	r2, r3, [r0]
 8003474:	2a00      	cmp	r2, #0
 8003476:	d1f3      	bne.n	8003460 <HAL_UART_IRQHandler+0x258>
        huart->RxState = HAL_UART_STATE_READY;
 8003478:	2320      	movs	r3, #32
 800347a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	f105 030c 	add.w	r3, r5, #12
 8003484:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003488:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348c:	f105 000c 	add.w	r0, r5, #12
 8003490:	e840 3200 	strex	r2, r3, [r0]
 8003494:	2a00      	cmp	r2, #0
 8003496:	d1f3      	bne.n	8003480 <HAL_UART_IRQHandler+0x278>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003498:	4620      	mov	r0, r4
 800349a:	f7ff fe4d 	bl	8003138 <HAL_UARTEx_RxEventCallback>
 800349e:	e6d0      	b.n	8003242 <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034a0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80034a4:	2a22      	cmp	r2, #34	; 0x22
 80034a6:	f47f af53 	bne.w	8003350 <HAL_UART_IRQHandler+0x148>
 80034aa:	4620      	mov	r0, r4
 80034ac:	f7ff fe46 	bl	800313c <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	e74d      	b.n	8003350 <HAL_UART_IRQHandler+0x148>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b4:	6923      	ldr	r3, [r4, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f47f af6a 	bne.w	8003390 <HAL_UART_IRQHandler+0x188>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034bc:	6a23      	ldr	r3, [r4, #32]
 80034be:	f833 2b02 	ldrh.w	r2, [r3], #2
 80034c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c6:	606a      	str	r2, [r5, #4]
      huart->pTxBuffPtr += 2U;
 80034c8:	6223      	str	r3, [r4, #32]
 80034ca:	e766      	b.n	800339a <HAL_UART_IRQHandler+0x192>
 80034cc:	08003129 	.word	0x08003129

080034d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034d4:	680c      	ldr	r4, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	fa94 f2a4 	rbit	r2, r4
 80034da:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80034de:	fa34 f302 	lsrs.w	r3, r4, r2
 80034e2:	d07e      	beq.n	80035e2 <LL_GPIO_Init+0x112>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80034e4:	f04f 0e01 	mov.w	lr, #1
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80034e8:	f04f 0c03 	mov.w	ip, #3
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80034ec:	f04f 0a0f 	mov.w	sl, #15
 80034f0:	e017      	b.n	8003522 <LL_GPIO_Init+0x52>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80034f2:	f8d0 8000 	ldr.w	r8, [r0]
 80034f6:	fa93 f7a3 	rbit	r7, r3
 80034fa:	fab7 f787 	clz	r7, r7
 80034fe:	fa93 f3a3 	rbit	r3, r3
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	007f      	lsls	r7, r7, #1
 8003508:	fa0c f707 	lsl.w	r7, ip, r7
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	ea28 0707 	bic.w	r7, r8, r7
 8003512:	fa05 f303 	lsl.w	r3, r5, r3
 8003516:	433b      	orrs	r3, r7
 8003518:	6003      	str	r3, [r0, #0]
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800351a:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800351c:	fa34 f302 	lsrs.w	r3, r4, r2
 8003520:	d05f      	beq.n	80035e2 <LL_GPIO_Init+0x112>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003522:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin)
 8003526:	4023      	ands	r3, r4
 8003528:	d0f7      	beq.n	800351a <LL_GPIO_Init+0x4a>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800352a:	684d      	ldr	r5, [r1, #4]
 800352c:	1e6f      	subs	r7, r5, #1
 800352e:	2f01      	cmp	r7, #1
 8003530:	d936      	bls.n	80035a0 <LL_GPIO_Init+0xd0>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003532:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8003536:	fa93 f7a3 	rbit	r7, r3
 800353a:	fab7 f787 	clz	r7, r7
 800353e:	fa93 f9a3 	rbit	r9, r3
 8003542:	690e      	ldr	r6, [r1, #16]
 8003544:	fab9 f989 	clz	r9, r9
 8003548:	007f      	lsls	r7, r7, #1
 800354a:	fa0c f707 	lsl.w	r7, ip, r7
 800354e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003552:	ea28 0707 	bic.w	r7, r8, r7
 8003556:	fa06 f909 	lsl.w	r9, r6, r9
 800355a:	ea47 0709 	orr.w	r7, r7, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800355e:	2d02      	cmp	r5, #2
 8003560:	60c7      	str	r7, [r0, #12]
 8003562:	d1c6      	bne.n	80034f2 <LL_GPIO_Init+0x22>
 8003564:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003568:	fab7 f787 	clz	r7, r7
 800356c:	2f07      	cmp	r7, #7
 800356e:	dc3b      	bgt.n	80035e8 <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003570:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8003574:	fa93 f7a3 	rbit	r7, r3
 8003578:	fab7 f787 	clz	r7, r7
 800357c:	fa93 f9a3 	rbit	r9, r3
 8003580:	694e      	ldr	r6, [r1, #20]
 8003582:	fab9 f989 	clz	r9, r9
 8003586:	00bf      	lsls	r7, r7, #2
 8003588:	fa0a f707 	lsl.w	r7, sl, r7
 800358c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8003590:	ea28 0707 	bic.w	r7, r8, r7
 8003594:	fa06 f909 	lsl.w	r9, r6, r9
 8003598:	ea47 0709 	orr.w	r7, r7, r9
 800359c:	6207      	str	r7, [r0, #32]
}
 800359e:	e7a8      	b.n	80034f2 <LL_GPIO_Init+0x22>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80035a0:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80035a4:	fa93 f7a3 	rbit	r7, r3
 80035a8:	fab7 f787 	clz	r7, r7
 80035ac:	fa93 f9a3 	rbit	r9, r3
 80035b0:	688e      	ldr	r6, [r1, #8]
 80035b2:	fab9 f989 	clz	r9, r9
 80035b6:	007f      	lsls	r7, r7, #1
 80035b8:	fa0c f707 	lsl.w	r7, ip, r7
 80035bc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80035c0:	ea28 0707 	bic.w	r7, r8, r7
 80035c4:	fa06 f909 	lsl.w	r9, r6, r9
 80035c8:	ea47 0709 	orr.w	r7, r7, r9
 80035cc:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80035ce:	6847      	ldr	r7, [r0, #4]
 80035d0:	68ce      	ldr	r6, [r1, #12]
 80035d2:	ea27 0703 	bic.w	r7, r7, r3
 80035d6:	fb06 f803 	mul.w	r8, r6, r3
 80035da:	ea47 0708 	orr.w	r7, r7, r8
 80035de:	6047      	str	r7, [r0, #4]
}
 80035e0:	e7a7      	b.n	8003532 <LL_GPIO_Init+0x62>
  }

  return (SUCCESS);
}
 80035e2:	2000      	movs	r0, #0
 80035e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80035e8:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 80035ec:	0a1f      	lsrs	r7, r3, #8
 80035ee:	fa97 f8a7 	rbit	r8, r7
 80035f2:	fab8 f888 	clz	r8, r8
 80035f6:	fa97 f7a7 	rbit	r7, r7
 80035fa:	694e      	ldr	r6, [r1, #20]
 80035fc:	fab7 f787 	clz	r7, r7
 8003600:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8003604:	fa0a f808 	lsl.w	r8, sl, r8
 8003608:	00bf      	lsls	r7, r7, #2
 800360a:	ea29 0808 	bic.w	r8, r9, r8
 800360e:	fa06 f707 	lsl.w	r7, r6, r7
 8003612:	ea48 0707 	orr.w	r7, r8, r7
 8003616:	6247      	str	r7, [r0, #36]	; 0x24
}
 8003618:	e76b      	b.n	80034f2 <LL_GPIO_Init+0x22>
 800361a:	bf00      	nop

0800361c <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800361c:	4602      	mov	r2, r0
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800361e:	6800      	ldr	r0, [r0, #0]
 8003620:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8003624:	d128      	bne.n	8003678 <LL_SPI_Init+0x5c>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003626:	6813      	ldr	r3, [r2, #0]
{
 8003628:	b430      	push	{r4, r5}
    MODIFY_REG(SPIx->CR1,
 800362a:	f423 4c7f 	bic.w	ip, r3, #65280	; 0xff00
 800362e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8003632:	432b      	orrs	r3, r5
 8003634:	688d      	ldr	r5, [r1, #8]
 8003636:	694c      	ldr	r4, [r1, #20]
 8003638:	432b      	orrs	r3, r5
 800363a:	68cd      	ldr	r5, [r1, #12]
 800363c:	432b      	orrs	r3, r5
 800363e:	690d      	ldr	r5, [r1, #16]
 8003640:	432b      	orrs	r3, r5
 8003642:	698d      	ldr	r5, [r1, #24]
 8003644:	4323      	orrs	r3, r4
 8003646:	432b      	orrs	r3, r5
 8003648:	69cd      	ldr	r5, [r1, #28]
 800364a:	432b      	orrs	r3, r5
 800364c:	6a0d      	ldr	r5, [r1, #32]
 800364e:	f02c 0cbf 	bic.w	ip, ip, #191	; 0xbf
 8003652:	432b      	orrs	r3, r5
 8003654:	ea43 030c 	orr.w	r3, r3, ip
 8003658:	6013      	str	r3, [r2, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800365a:	6853      	ldr	r3, [r2, #4]
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	ea43 4314 	orr.w	r3, r3, r4, lsr #16

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003664:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003668:	6053      	str	r3, [r2, #4]
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800366a:	d00b      	beq.n	8003684 <LL_SPI_Init+0x68>
    }
    status = SUCCESS;
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800366c:	69d3      	ldr	r3, [r2, #28]
 800366e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  return status;
}
 8003672:	bc30      	pop	{r4, r5}
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003674:	61d3      	str	r3, [r2, #28]
}
 8003676:	4770      	bx	lr
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003678:	69d3      	ldr	r3, [r2, #28]
 800367a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  ErrorStatus status = ERROR;
 800367e:	2001      	movs	r0, #1
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003680:	61d3      	str	r3, [r2, #28]
}
 8003682:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003684:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 8003686:	6113      	str	r3, [r2, #16]
}
 8003688:	e7f0      	b.n	800366c <LL_SPI_Init+0x50>
 800368a:	bf00      	nop

0800368c <__libc_init_array>:
 800368c:	b570      	push	{r4, r5, r6, lr}
 800368e:	4d0d      	ldr	r5, [pc, #52]	; (80036c4 <__libc_init_array+0x38>)
 8003690:	4c0d      	ldr	r4, [pc, #52]	; (80036c8 <__libc_init_array+0x3c>)
 8003692:	1b64      	subs	r4, r4, r5
 8003694:	10a4      	asrs	r4, r4, #2
 8003696:	2600      	movs	r6, #0
 8003698:	42a6      	cmp	r6, r4
 800369a:	d109      	bne.n	80036b0 <__libc_init_array+0x24>
 800369c:	4d0b      	ldr	r5, [pc, #44]	; (80036cc <__libc_init_array+0x40>)
 800369e:	4c0c      	ldr	r4, [pc, #48]	; (80036d0 <__libc_init_array+0x44>)
 80036a0:	f000 f82e 	bl	8003700 <_init>
 80036a4:	1b64      	subs	r4, r4, r5
 80036a6:	10a4      	asrs	r4, r4, #2
 80036a8:	2600      	movs	r6, #0
 80036aa:	42a6      	cmp	r6, r4
 80036ac:	d105      	bne.n	80036ba <__libc_init_array+0x2e>
 80036ae:	bd70      	pop	{r4, r5, r6, pc}
 80036b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036b4:	4798      	blx	r3
 80036b6:	3601      	adds	r6, #1
 80036b8:	e7ee      	b.n	8003698 <__libc_init_array+0xc>
 80036ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80036be:	4798      	blx	r3
 80036c0:	3601      	adds	r6, #1
 80036c2:	e7f2      	b.n	80036aa <__libc_init_array+0x1e>
 80036c4:	08003748 	.word	0x08003748
 80036c8:	08003748 	.word	0x08003748
 80036cc:	08003748 	.word	0x08003748
 80036d0:	0800374c 	.word	0x0800374c

080036d4 <memcpy>:
 80036d4:	440a      	add	r2, r1
 80036d6:	4291      	cmp	r1, r2
 80036d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80036dc:	d100      	bne.n	80036e0 <memcpy+0xc>
 80036de:	4770      	bx	lr
 80036e0:	b510      	push	{r4, lr}
 80036e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036ea:	4291      	cmp	r1, r2
 80036ec:	d1f9      	bne.n	80036e2 <memcpy+0xe>
 80036ee:	bd10      	pop	{r4, pc}

080036f0 <memset>:
 80036f0:	4402      	add	r2, r0
 80036f2:	4603      	mov	r3, r0
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d100      	bne.n	80036fa <memset+0xa>
 80036f8:	4770      	bx	lr
 80036fa:	f803 1b01 	strb.w	r1, [r3], #1
 80036fe:	e7f9      	b.n	80036f4 <memset+0x4>

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
